{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-05-16T09:53:44.046185Z", "invocation_id": "adc88329-c6c1-4fea-9e00-c27aa77d3f71", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.594798Z", "completed_at": "2025-05-16T09:53:43.602893Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.603365Z", "completed_at": "2025-05-16T09:53:43.603377Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009627819061279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_beverage_consumption", "compiled": true, "compiled_code": "SELECT id_drink, str_drink, str_category, str_alcoholic, str_glass, str_instructions, \nstr_drink_thumb, (date_modified AT TIME ZONE 'Australia/Melbourne')::date AS date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8\n\t-- FROM cocktail_data.consumption\n    from \"camondagster\".\"beverage_data\".\"consumption\"", "relation_name": "\"my_duckdb\".\"main_base\".\"base_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.605679Z", "completed_at": "2025-05-16T09:53:43.609337Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.609794Z", "completed_at": "2025-05-16T09:53:43.609802Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005270719528198242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_beverage_glass_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Beverage_glass_lookup\n-- Description: Beverage Glass Type Dim Base Table\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSelect str_glass as Glass_Type,\nmd5(cast(coalesce(cast(str_glass as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as Glass_Type_SK\nfrom \"camondagster\".\"beverage_data\".\"glasses\"", "relation_name": "\"my_duckdb\".\"main_base\".\"base_beverage_glass_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.612002Z", "completed_at": "2025-05-16T09:53:43.615183Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.615663Z", "completed_at": "2025-05-16T09:53:43.615670Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004725933074951172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_beverage_ingredients_lookup", "compiled": true, "compiled_code": "Select str_ingredient1 as Ingredient,\nit.id_drink as beverage_id,\nit.str_drink as Beverage_Name\nfrom \"camondagster\".\"beverage_data\".\"ingredients\" as i \nleft join \"camondagster\".\"beverage_data\".\"ingredients_table\"  as it\n\ton i.str_ingredient1 = it.source_ingredient\nwhere it.id_drink is not null", "relation_name": "\"my_duckdb\".\"main_base\".\"base_beverage_ingredients_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.617936Z", "completed_at": "2025-05-16T09:53:43.621855Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.622298Z", "completed_at": "2025-05-16T09:53:43.622305Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005525827407836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_beverages", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Beverages\n-- Description: Base Table for multiple Dims - Bev Type, Alcoholic Type and Beverage Name\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nselect bt.str_drink as beverage_name, \n    bt.id_drink as beverage_id, \n\tbt.source_beverage_type as beverage_type,\n\tmd5(cast(coalesce(cast(source_beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_alcohol_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_category_sk,\n\tact.source_alcohol_type as alcoholic_type\n\tfrom \"camondagster\".\"beverage_data\".\"beverages_table\" as bt\n    left join \"camondagster\".\"beverage_data\".\"alcoholic_table\" as act \n\ton bt.id_drink = act.id_drink", "relation_name": "\"my_duckdb\".\"main_base\".\"base_beverages\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.624482Z", "completed_at": "2025-05-16T09:53:43.628863Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.629305Z", "completed_at": "2025-05-16T09:53:43.629311Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005865812301635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_geo", "compiled": true, "compiled_code": "SELECT city_id, city, latitude, longitude, country_code, country, region, continent\nFrom \"camondagster\".\"geo_data\".\"geo_cities\" \nwhere country in ('New Zealand', 'United Kingdom', 'Australia', 'Canada')", "relation_name": "\"my_duckdb\".\"main_base\".\"base_geo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.631627Z", "completed_at": "2025-05-16T09:53:43.634482Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.634952Z", "completed_at": "2025-05-16T09:53:43.634957Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0045201778411865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_gsheets_finance", "compiled": true, "compiled_code": "SELECT \n    Id, \n    stock, \n    CAST(price AS DECIMAL) AS price,  -- DuckDB doesn't have a money type\n    date_time AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS date_time,\n    ROUND((MAX(price) OVER(PARTITION BY stock) - MIN(price) OVER(PARTITION BY stock)), 2) AS price_spread,\n    ROUND((LAST(price) OVER(PARTITION BY stock ORDER BY date_time) - FIRST(price) OVER(PARTITION BY stock)), 2) AS relative_price_movement,\n    ROUND((LAST(price) OVER(PARTITION BY stock) - FIRST(price) OVER(PARTITION BY stock)), 2) AS abs_price_movement,\n    COUNT(id) OVER(PARTITION BY stock) AS Num_Stock_Entries\nFROM \"camondagster\".\"google_sheets_data\".\"gsheets_finance\"", "relation_name": "\"my_duckdb\".\"main_base\".\"base_gsheets_finance\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.637100Z", "completed_at": "2025-05-16T09:53:43.640861Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.641300Z", "completed_at": "2025-05-16T09:53:43.641306Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0051860809326171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_meal_category_country", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_meal_category_country\n-- Description: Base Table for multiple Dims - meal category, meal country\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT ct.str_meal as meal_name, ct.id_meal as meal_id, \n\tct.source_country as country_name,\n\tmd5(cast(coalesce(cast(source_country as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_category as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as meal_country_category_sk,\n\tcat.source_category as category_name\nFROM \"camondagster\".\"meals_data\".\"country_table\" as ct\n\tleft join \"camondagster\".\"meals_data\".\"category_table\" as cat \n\ton ct.id_meal = cat.id_meal", "relation_name": "\"my_duckdb\".\"main_base\".\"base_meal_category_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.643718Z", "completed_at": "2025-05-16T09:53:43.646577Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.647034Z", "completed_at": "2025-05-16T09:53:43.647040Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0044558048248291016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_meal_consumption", "compiled": true, "compiled_code": "select id_meal as meal_id, str_meal as meal_name, str_category as category_name, str_area as country_name, \nstr_instructions as instructions, str_meal_thumb as meal_image_url, str_youtube as meal_youtube_url, \nNULLIF(str_ingredient1, '') as str_ingredient1, \nNULLIF(str_ingredient2, '') as str_ingredient2,\nNULLIF(str_ingredient3, '') as str_ingredient3,\nNULLIF(str_ingredient4, '') as str_ingredient4,\nNULLIF(str_ingredient5, '') as str_ingredient5,\nNULLIF(str_ingredient6, '') as str_ingredient6,\nNULLIF(str_ingredient7, '') as str_ingredient7, \nNULLIF(str_ingredient8, '') as str_ingredient8,\nNULLIF(str_ingredient9, '') as str_ingredient9,\nNULLIF(str_ingredient10, '') as str_ingredient10,\nNULLIF(str_ingredient11, '') as str_ingredient11,\nNULLIF(str_ingredient12, '') as str_ingredient12,\nNULLIF(str_ingredient13, '') as str_ingredient13,\nNULLIF(str_ingredient14, '') as str_ingredient14,\nNULLIF(str_ingredient15, '') as str_ingredient15,\nNULLIF(str_ingredient16, '') as str_ingredient16,\nNULLIF(str_ingredient17, '') as str_ingredient17,\nNULLIF(str_ingredient18, '') as str_ingredient18,\nNULLIF(str_ingredient19, '') as str_ingredient19,\nNULLIF(str_ingredient20, '') as str_ingredient20,\nstr_source as meal_url\n    from \"camondagster\".\"meals_data\".\"consumption\"", "relation_name": "\"my_duckdb\".\"main_base\".\"base_meal_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.649235Z", "completed_at": "2025-05-16T09:53:43.652108Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.652547Z", "completed_at": "2025-05-16T09:53:43.652567Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004330873489379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_meal_ingredient_table", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_meal_ingredient_table\n-- Description: Base Table for list of meals for each ingredient\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT str_meal as meal_name, id_meal as meal_id, \nsource_ingredient as ingredient_name\nFROM \"camondagster\".\"meals_data\".\"ingredient_table\"", "relation_name": "\"my_duckdb\".\"main_base\".\"base_meal_ingredient_table\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.654729Z", "completed_at": "2025-05-16T09:53:43.657467Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.657928Z", "completed_at": "2025-05-16T09:53:43.657932Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004202365875244141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_meal_ingredients", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_meal_ingredients\n-- Description: Base Table for meal ingredients\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT id_ingredient as ingredient_id, str_ingredient as ingredient_name\nFROM \"camondagster\".\"meals_data\".\"ingredients\"", "relation_name": "\"my_duckdb\".\"main_base\".\"base_meal_ingredients\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.660100Z", "completed_at": "2025-05-16T09:53:43.664173Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.664626Z", "completed_at": "2025-05-16T09:53:43.664631Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005536317825317383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_openlibrary", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Beverage_openlibrary\n-- Description: Unioning Tables with Books seperated by Search and Filter term\n-- from the OpenLibrary API, the point of this is to test using both DLT State\n-- & DuckDb connection to check for New API data (via DLT State) and deleted or\n-- truncation data loss with DuckDB sql comparison with DLT State.\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-15 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"sql_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"python_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"data_warehousing_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"data_engineering_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"apache_airflow_books\"", "relation_name": "\"my_duckdb\".\"main_base\".\"base_openlibrary\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.666811Z", "completed_at": "2025-05-16T09:53:43.669639Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.670082Z", "completed_at": "2025-05-16T09:53:43.670086Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004290103912353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_rm_character_episode", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_character_episode\n-- Description: Base join table\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT\n  _dlt_root_id AS character_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS episode_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"character__episode\"", "relation_name": "\"my_duckdb\".\"main_base\".\"base_rm_character_episode\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.672161Z", "completed_at": "2025-05-16T09:53:43.676713Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.677163Z", "completed_at": "2025-05-16T09:53:43.677167Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00599217414855957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_rm_characters", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_characters\n-- Description: Base Table for ricky and morty characters from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nSELECT id, name, status, species, gender, origin__name, location__name, location__url, \nimage, url, created AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS created\n, \"_dlt_id\" as character_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"character\"", "relation_name": "\"my_duckdb\".\"main_base\".\"base_rm_characters\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.679232Z", "completed_at": "2025-05-16T09:53:43.682056Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.682500Z", "completed_at": "2025-05-16T09:53:43.682504Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004268646240234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_rm_episode_character", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_episode_character\n-- Description: Base join table\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT\n  _dlt_root_id AS episode_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS character_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"episode__characters\"", "relation_name": "\"my_duckdb\".\"main_base\".\"base_rm_episode_character\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.684542Z", "completed_at": "2025-05-16T09:53:43.687410Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.687869Z", "completed_at": "2025-05-16T09:53:43.687874Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004271984100341797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_rm_episodes", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_rm_episode\n-- Description: Base Table for ricky and morty episodes from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nSELECT id, name\n,STRPTIME(air_date, '%B %d, %Y') AS air_date\n, episode, url \n,created AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS created\n,\"_dlt_id\" as episode_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"episode\"", "relation_name": "\"my_duckdb\".\"main_base\".\"base_rm_episodes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.689921Z", "completed_at": "2025-05-16T09:53:43.692670Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.693112Z", "completed_at": "2025-05-16T09:53:43.693116Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00417780876159668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_rm_location_residents", "compiled": true, "compiled_code": "SELECT\n  _dlt_root_id AS location_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS character_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"location__residents\"", "relation_name": "\"my_duckdb\".\"main_base\".\"base_rm_location_residents\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.695163Z", "completed_at": "2025-05-16T09:53:43.698036Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.698471Z", "completed_at": "2025-05-16T09:53:43.698476Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004312038421630859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.base_rm_locations", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_rm_locations\n-- Description: Base Table for ricky and morty locations from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT id, name, type, dimension, url\n,created AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS created\n,\"_dlt_id\" as location_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"location\"", "relation_name": "\"my_duckdb\".\"main_base\".\"base_rm_locations\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.701692Z", "completed_at": "2025-05-16T09:53:43.705152Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.705632Z", "completed_at": "2025-05-16T09:53:43.705637Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005656719207763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_beverage_ingredient_jointable", "compiled": true, "compiled_code": "SELECT distinct id_drink as Beverage_ID\n    from \"camondagster\".\"beverage_data\".\"ingredients_table\" as it\n    where id_drink is not null", "relation_name": "\"my_duckdb\".\"main_common\".\"dim_beverage_ingredient_jointable\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.707739Z", "completed_at": "2025-05-16T09:53:43.709908Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.710350Z", "completed_at": "2025-05-16T09:53:43.710355Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003603696823120117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_date", "compiled": true, "compiled_code": "WITH RECURSIVE date_series AS (\n    SELECT DATE '2000-01-01' AS date\n    UNION ALL\n    SELECT date + INTERVAL '1 day'\n    FROM date_series\n    WHERE date + INTERVAL '1 day' < DATE '2030-01-01'\n)\nSELECT\n    date AS date_col,\n    EXTRACT(YEAR FROM date) AS year,\n    EXTRACT(MONTH FROM date) AS month,\n    EXTRACT(DAY FROM date) AS day,\n    strftime('%B', date) AS month_name,  -- Replacing TO_CHAR with strftime\n    strftime('%A', date) AS weekday_name,  -- Replacing TO_CHAR with strftime\n    EXTRACT(DOW FROM date) AS day_of_week,\n    CASE WHEN EXTRACT(DOW FROM date) IN (0, 6) THEN TRUE ELSE FALSE END AS is_weekend,\n    EXTRACT(DOY FROM date) AS day_of_year,\n    EXTRACT(WEEK FROM date) AS week_of_year,\n    EXTRACT(QUARTER FROM date) AS quarter\nFROM date_series", "relation_name": "\"my_duckdb\".\"main_common\".\"dim_date\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.712539Z", "completed_at": "2025-05-16T09:53:43.722645Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.723110Z", "completed_at": "2025-05-16T09:53:43.723115Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011532783508300781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_beverage_consumption_id_drink.561caf7667", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_drink\nfrom \"my_duckdb\".\"main_base\".\"base_beverage_consumption\"\nwhere id_drink is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.725299Z", "completed_at": "2025-05-16T09:53:43.728032Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.728501Z", "completed_at": "2025-05-16T09:53:43.728505Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004246234893798828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.CamOnDagster.glass_type_snapshot", "compiled": true, "compiled_code": "\n\n\n\nSELECT \n    Glass_Type,\n    Glass_Type_SK\nFROM \"my_duckdb\".\"main_base\".\"base_beverage_glass_lookup\" \n", "relation_name": "\"my_duckdb\".\"public_snapshots\".\"glass_type_snapshot\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.730708Z", "completed_at": "2025-05-16T09:53:43.734539Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.735016Z", "completed_at": "2025-05-16T09:53:43.735020Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005309343338012695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_beverage_glass_lookup_glass_type.af0bc394b6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect glass_type\nfrom \"my_duckdb\".\"main_base\".\"base_beverage_glass_lookup\"\nwhere glass_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.737143Z", "completed_at": "2025-05-16T09:53:43.743021Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.743476Z", "completed_at": "2025-05-16T09:53:43.743481Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0073566436767578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_base_beverage_glass_lookup_glass_type.ad28035660", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    glass_type as unique_field,\n    count(*) as n_records\n\nfrom \"my_duckdb\".\"main_base\".\"base_beverage_glass_lookup\"\nwhere glass_type is not null\ngroup by glass_type\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.745623Z", "completed_at": "2025-05-16T09:53:43.749722Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.750174Z", "completed_at": "2025-05-16T09:53:43.750179Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005560874938964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_beverage_ingredient_hierarchy", "compiled": true, "compiled_code": "SELECT bil.ingredient, bil.beverage_id, bil.beverage_name\n\t,bil2.ingredient as ingredient2\n\t,bil3.ingredient as ingredient3\n\t,bil4.ingredient as ingredient4\n\t,bil5.ingredient as ingredient5\n\t,bil6.ingredient as ingredient6\n\t,bil7.ingredient as ingredient7\n\t-- FROM public_base.base_beverage_ingredients_lookup as bil\n    from \"my_duckdb\".\"main_base\".\"base_beverage_ingredients_lookup\" as bil\n\t-- Second\n\t-- left join public_base.base_beverage_ingredients_lookup as bil2 \n    left join \"my_duckdb\".\"main_base\".\"base_beverage_ingredients_lookup\" as bil2\n\ton bil.beverage_id = bil2.beverage_id and bil.ingredient != bil2.ingredient\n\t-- Third\n\t-- left join public_base.base_beverage_ingredients_lookup as bil3\n    left join \"my_duckdb\".\"main_base\".\"base_beverage_ingredients_lookup\" as bil3\n\ton bil.beverage_id = bil3.beverage_id and bil3.ingredient not in (bil2.ingredient, bil.ingredient)\n\t-- Fourth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil4\n    left join \"my_duckdb\".\"main_base\".\"base_beverage_ingredients_lookup\" as bil4\n\ton bil.beverage_id = bil4.beverage_id and bil4.ingredient not in (bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- Fifth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil5\n    left join \"my_duckdb\".\"main_base\".\"base_beverage_ingredients_lookup\" as bil5\n\ton bil.beverage_id = bil5.beverage_id and bil5.ingredient not in (bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- sixth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil6\n    left join \"my_duckdb\".\"main_base\".\"base_beverage_ingredients_lookup\" as bil6\n\ton bil.beverage_id = bil6.beverage_id and bil6.ingredient not in (bil5.ingredient, bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- seventh\n\t-- left join public_base.base_beverage_ingredients_lookup as bil7\n    left join \"my_duckdb\".\"main_base\".\"base_beverage_ingredients_lookup\" as bil7\n\ton bil.beverage_id = bil7.beverage_id and bil7.ingredient not in (bil6.ingredient, bil5.ingredient, bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n-- \twhere bil.beverage_id = '17836'\n\torder by ingredient desc, beverage_name desc, ingredient2 desc", "relation_name": "\"my_duckdb\".\"main_common\".\"dim_beverage_ingredient_hierarchy\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.752330Z", "completed_at": "2025-05-16T09:53:43.756536Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.757017Z", "completed_at": "2025-05-16T09:53:43.757021Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005734682083129883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.dbt_utils_unique_combination_of_columns_base_beverage_ingredients_lookup_ingredient__beverage_id.b326d9a641", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ingredient, beverage_id\n    from \"my_duckdb\".\"main_base\".\"base_beverage_ingredients_lookup\"\n    group by ingredient, beverage_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.759163Z", "completed_at": "2025-05-16T09:53:43.763834Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.764283Z", "completed_at": "2025-05-16T09:53:43.764288Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006133317947387695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.staging_beverage_lookup", "compiled": true, "compiled_code": "select beverage_name, \n\t-- used in dim_beverage to connect to consumption\n    beverage_id, \n\tbeverage_type,\n\t-- used in dim_beverage and dim_beverage_type as the connection\n\tmd5(cast(coalesce(cast(beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_type_sk,\n\t-- used in dim_alcoholic_type and dim_beverage_type as connection\n\tmd5(cast(coalesce(cast(beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(alcoholic_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_category_sk,\n\talcoholic_type,\n\t-- in dim_alcoholic_type encase any future fact tables need to connect directly \n\tmd5(cast(coalesce(cast(alcoholic_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as alcoholic_type_sk\n    from \"my_duckdb\".\"main_base\".\"base_beverages\"", "relation_name": "\"my_duckdb\".\"main_staging\".\"staging_beverage_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.766514Z", "completed_at": "2025-05-16T09:53:43.772086Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.772536Z", "completed_at": "2025-05-16T09:53:43.772540Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0070149898529052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.accepted_values_base_beverages_alcoholic_type__True__Non_alcoholic__Optional_alcohol__Alcoholic.34c9662782", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        alcoholic_type as value_field,\n        count(*) as n_records\n\n    from \"my_duckdb\".\"main_base\".\"base_beverages\"\n    group by alcoholic_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Non alcoholic','Optional alcohol','Alcoholic'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.774653Z", "completed_at": "2025-05-16T09:53:43.778285Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.778752Z", "completed_at": "2025-05-16T09:53:43.778757Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0051021575927734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_beverages_beverage_id.b8f3d5637e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect beverage_id\nfrom \"my_duckdb\".\"main_base\".\"base_beverages\"\nwhere beverage_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.780845Z", "completed_at": "2025-05-16T09:53:43.784620Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.785069Z", "completed_at": "2025-05-16T09:53:43.785078Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005223512649536133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_beverages_beverage_name.4ae5d66d1b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect beverage_name\nfrom \"my_duckdb\".\"main_base\".\"base_beverages\"\nwhere beverage_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.787197Z", "completed_at": "2025-05-16T09:53:43.791970Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.792435Z", "completed_at": "2025-05-16T09:53:43.792439Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00626063346862793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.relationships_base_beverage_consumption_id_drink__beverage_id__ref_base_beverages_.e5e651a6ba", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select id_drink as from_field\n    from \"my_duckdb\".\"main_base\".\"base_beverage_consumption\"\n    where id_drink is not null\n),\n\nparent as (\n    select beverage_id as to_field\n    from \"my_duckdb\".\"main_base\".\"base_beverages\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.794594Z", "completed_at": "2025-05-16T09:53:43.798262Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.798725Z", "completed_at": "2025-05-16T09:53:43.798730Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005139350891113281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_base_beverages_beverage_id.fca0ee3980", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    beverage_id as unique_field,\n    count(*) as n_records\n\nfrom \"my_duckdb\".\"main_base\".\"base_beverages\"\nwhere beverage_id is not null\ngroup by beverage_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.800830Z", "completed_at": "2025-05-16T09:53:43.804640Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.805084Z", "completed_at": "2025-05-16T09:53:43.805089Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0052623748779296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_base_beverages_beverage_name.a2d4fd1356", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    beverage_name as unique_field,\n    count(*) as n_records\n\nfrom \"my_duckdb\".\"main_base\".\"base_beverages\"\nwhere beverage_name is not null\ngroup by beverage_name\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.807167Z", "completed_at": "2025-05-16T09:53:43.811241Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.811705Z", "completed_at": "2025-05-16T09:53:43.811710Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0055272579193115234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.staging_geo", "compiled": true, "compiled_code": "select city_id, city, latitude, longitude, country_code, country, region, \nmd5(cast(coalesce(cast(city as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as City_SK,\nmd5(cast(coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as Country_SK\nfrom \"my_duckdb\".\"main_base\".\"base_geo\"", "relation_name": "\"my_duckdb\".\"main_staging\".\"staging_geo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.813935Z", "completed_at": "2025-05-16T09:53:43.817785Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.818245Z", "completed_at": "2025-05-16T09:53:43.818249Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005460500717163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.accepted_values_base_geo_country_code__True__AU__NZ__CA__GB.a3d3afa24f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        country_code as value_field,\n        count(*) as n_records\n\n    from \"my_duckdb\".\"main_base\".\"base_geo\"\n    group by country_code\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'AU','NZ','CA','GB'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.820398Z", "completed_at": "2025-05-16T09:53:43.826408Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.826904Z", "completed_at": "2025-05-16T09:53:43.826909Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007515907287597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.dbt_expectations_expect_column_values_to_be_between_base_geo_latitude__90___90__False.c3084ce8f0", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and latitude >= -90 and latitude <= 90\n)\n as expression\n\n\n    from \"my_duckdb\".\"main_base\".\"base_geo\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.829046Z", "completed_at": "2025-05-16T09:53:43.833255Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.833743Z", "completed_at": "2025-05-16T09:53:43.833748Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0057184696197509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.dbt_expectations_expect_column_values_to_be_between_base_geo_longitude__180___180__False.5d5a8f0a6a", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and longitude >= -180 and longitude <= 180\n)\n as expression\n\n\n    from \"my_duckdb\".\"main_base\".\"base_geo\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.835876Z", "completed_at": "2025-05-16T09:53:43.839531Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.840009Z", "completed_at": "2025-05-16T09:53:43.840013Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005152225494384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_geo_city_id.94562eb347", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city_id\nfrom \"my_duckdb\".\"main_base\".\"base_geo\"\nwhere city_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.842115Z", "completed_at": "2025-05-16T09:53:43.845831Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.846272Z", "completed_at": "2025-05-16T09:53:43.846277Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005156755447387695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_base_geo_city_id.a4c893fe58", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    city_id as unique_field,\n    count(*) as n_records\n\nfrom \"my_duckdb\".\"main_base\".\"base_geo\"\nwhere city_id is not null\ngroup by city_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.848407Z", "completed_at": "2025-05-16T09:53:43.852322Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.852808Z", "completed_at": "2025-05-16T09:53:43.852813Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005455732345581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_gsheets_finance_id.0d75c08608", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"my_duckdb\".\"main_base\".\"base_gsheets_finance\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.854975Z", "completed_at": "2025-05-16T09:53:43.858714Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.859177Z", "completed_at": "2025-05-16T09:53:43.859182Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0052220821380615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_base_gsheets_finance_id.81717edef5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"my_duckdb\".\"main_base\".\"base_gsheets_finance\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.861286Z", "completed_at": "2025-05-16T09:53:43.864809Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.865255Z", "completed_at": "2025-05-16T09:53:43.865260Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004958629608154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.staging_meal_category_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: staging_meal_category_lookup\n-- Description: Staging Table, lookup for category and country per meal, used for Dim\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT \n\tmeal_name, \n\tmeal_id, category_name,  \n\t-- Used in Dim_Meal_Category and Dim_Meal_Country\n\tmeal_country_category_sk,\n\tcountry_name,\n\t-- In Dim_Meal_Country encase any future fact tables need to connect directly \n\tmd5(cast(coalesce(cast(country_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as meal_country_sk\n    From \"my_duckdb\".\"main_base\".\"base_meal_category_country\"", "relation_name": "\"my_duckdb\".\"main_staging\".\"staging_meal_category_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.867457Z", "completed_at": "2025-05-16T09:53:43.873311Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.873826Z", "completed_at": "2025-05-16T09:53:43.873831Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0074291229248046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_meal_category_country_meal_id.f1fc6a2e02", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect meal_id\nfrom \"my_duckdb\".\"main_base\".\"base_meal_category_country\"\nwhere meal_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.875923Z", "completed_at": "2025-05-16T09:53:43.879517Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.879977Z", "completed_at": "2025-05-16T09:53:43.879982Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005048513412475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_base_meal_category_country_meal_id.96de22ba03", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    meal_id as unique_field,\n    count(*) as n_records\n\nfrom \"my_duckdb\".\"main_base\".\"base_meal_category_country\"\nwhere meal_id is not null\ngroup by meal_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.882060Z", "completed_at": "2025-05-16T09:53:43.885830Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.886284Z", "completed_at": "2025-05-16T09:53:43.886289Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005219221115112305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_meal_consumption_meal_id.5801469d88", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect meal_id\nfrom \"my_duckdb\".\"main_base\".\"base_meal_consumption\"\nwhere meal_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.888386Z", "completed_at": "2025-05-16T09:53:43.893074Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.893524Z", "completed_at": "2025-05-16T09:53:43.893529Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006160736083984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.relationships_base_meal_consumption_meal_id__meal_id__ref_base_meal_category_country_.ebae62c8a2", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select meal_id as from_field\n    from \"my_duckdb\".\"main_base\".\"base_meal_consumption\"\n    where meal_id is not null\n),\n\nparent as (\n    select meal_id as to_field\n    from \"my_duckdb\".\"main_base\".\"base_meal_category_country\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.895663Z", "completed_at": "2025-05-16T09:53:43.899617Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.900073Z", "completed_at": "2025-05-16T09:53:43.900078Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005424022674560547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.dbt_utils_unique_combination_of_columns_base_meal_ingredient_table_ingredient_name__meal_id.319098ed2d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ingredient_name, meal_id\n    from \"my_duckdb\".\"main_base\".\"base_meal_ingredient_table\"\n    group by ingredient_name, meal_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.902175Z", "completed_at": "2025-05-16T09:53:43.905279Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.905753Z", "completed_at": "2025-05-16T09:53:43.905758Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0045816898345947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.staging_meal_ingredients_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: staging_meal_ingredients_lookup\n-- Description: Staging Table, lookup for Ingredients for each meal, used for Dim\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT mit.meal_name, mit.meal_id, mit.ingredient_name, mi.ingredient_id\n\tFROM \"my_duckdb\".\"main_base\".\"base_meal_ingredient_table\" as mit \n\tleft join \"my_duckdb\".\"main_base\".\"base_meal_ingredients\" as mi \n\ton mit.ingredient_name = mi.ingredient_name", "relation_name": "\"my_duckdb\".\"main_staging\".\"staging_meal_ingredients_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.907935Z", "completed_at": "2025-05-16T09:53:43.911703Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.912152Z", "completed_at": "2025-05-16T09:53:43.912156Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005212068557739258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_meal_ingredients_ingredient_id.0a9dcc549e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingredient_id\nfrom \"my_duckdb\".\"main_base\".\"base_meal_ingredients\"\nwhere ingredient_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.914233Z", "completed_at": "2025-05-16T09:53:43.919526Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.919991Z", "completed_at": "2025-05-16T09:53:43.919996Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006750583648681641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_base_meal_ingredients_ingredient_id.a78af5b0c2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ingredient_id as unique_field,\n    count(*) as n_records\n\nfrom \"my_duckdb\".\"main_base\".\"base_meal_ingredients\"\nwhere ingredient_id is not null\ngroup by ingredient_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.922056Z", "completed_at": "2025-05-16T09:53:43.925849Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.926283Z", "completed_at": "2025-05-16T09:53:43.926288Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005223512649536133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_base_openlibrary_key.4f2c5727d5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"my_duckdb\".\"main_base\".\"base_openlibrary\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.928341Z", "completed_at": "2025-05-16T09:53:43.931932Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.932374Z", "completed_at": "2025-05-16T09:53:43.932379Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005003929138183594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_base_openlibrary_key.c2996aab1f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"my_duckdb\".\"main_base\".\"base_openlibrary\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.934440Z", "completed_at": "2025-05-16T09:53:43.938194Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.938675Z", "completed_at": "2025-05-16T09:53:43.938680Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0052111148834228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_dim_date_date_col.0abb09b4ea", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_col\nfrom \"my_duckdb\".\"main_common\".\"dim_date\"\nwhere date_col is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.940768Z", "completed_at": "2025-05-16T09:53:43.944412Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.944881Z", "completed_at": "2025-05-16T09:53:43.944886Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0051097869873046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_dim_date_date_col.217a54f7bd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date_col as unique_field,\n    count(*) as n_records\n\nfrom \"my_duckdb\".\"main_common\".\"dim_date\"\nwhere date_col is not null\ngroup by date_col\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.947125Z", "completed_at": "2025-05-16T09:53:43.949883Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.950331Z", "completed_at": "2025-05-16T09:53:43.950335Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0043866634368896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_beverage_glass_type", "compiled": true, "compiled_code": "with base as (\nSELECT glass_type, glass_type_sk, dbt_valid_to,\nrow_number() over(partition by glass_type_sk order by dbt_valid_to desc) as rw_num\n    from \"my_duckdb\".\"public_snapshots\".\"glass_type_snapshot\"\n\t)\n\t\n\tSelect glass_type, glass_type_sk\n\tfrom base\n\twhere rw_num = 1", "relation_name": "\"my_duckdb\".\"main_common\".\"dim_beverage_glass_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.952457Z", "completed_at": "2025-05-16T09:53:43.955185Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.955672Z", "completed_at": "2025-05-16T09:53:43.955678Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004221200942993164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_alcoholic_type", "compiled": true, "compiled_code": "SELECT alcoholic_type, \nalcoholic_type_sk\n\tFrom \"my_duckdb\".\"main_staging\".\"staging_beverage_lookup\"\ngroup by alcoholic_type, alcoholic_type_sk", "relation_name": "\"my_duckdb\".\"main_common\".\"dim_alcoholic_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.957865Z", "completed_at": "2025-05-16T09:53:43.960622Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.961060Z", "completed_at": "2025-05-16T09:53:43.961065Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0043027400970458984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_beverage_type", "compiled": true, "compiled_code": "select beverage_type, alcoholic_type, beverage_category_sk, Alcoholic_Type_SK\n\tFrom \"my_duckdb\".\"main_staging\".\"staging_beverage_lookup\"\n\tgroup by beverage_type, alcoholic_type, beverage_category_sk, Alcoholic_Type_SK", "relation_name": "\"my_duckdb\".\"main_common\".\"dim_beverage_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.963110Z", "completed_at": "2025-05-16T09:53:43.968276Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.968751Z", "completed_at": "2025-05-16T09:53:43.968756Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006611347198486328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.staging_beverage_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Staging_Beverage_Consumption\n-- Description: Fact Table data, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nselect id_drink as beverage_id, str_drink as beverage_name, \nbcl.beverage_category_sk as beverage_category_sk,\nstr_glass as glass_type,\nbcl.beverage_type_sk as beverage_type_sk,\nbcl.beverage_type as beverage_type,\nbcl.alcoholic_type_sk as alcoholic_type_sk,\nbcl.alcoholic_type as alcoholic_type,\nstr_category, \nstr_alcoholic, \nbgl.glass_type_sk,\nstr_instructions as beverage_instructions, str_drink_thumb as beverage_url, date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, \nstr_ingredient6, str_ingredient7, str_ingredient8\n\t-- from public_base.base_beverage_consumption as bc\n    from \"my_duckdb\".\"main_base\".\"base_beverage_consumption\" as bc\n\t-- left join public_base.base_beverage_glass_lookup as bgl\n    left join \"my_duckdb\".\"main_base\".\"base_beverage_glass_lookup\"  as bgl\n\ton bc.str_glass = bgl.glass_type\n\tleft join \"my_duckdb\".\"main_staging\".\"staging_beverage_lookup\"  as bcl\n\ton bc.id_drink = bcl.beverage_id", "relation_name": "\"my_duckdb\".\"main_staging\".\"staging_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.970937Z", "completed_at": "2025-05-16T09:53:43.973594Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.974041Z", "completed_at": "2025-05-16T09:53:43.974046Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004111051559448242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_city", "compiled": true, "compiled_code": "select city, latitude, longitude, region, City_SK,\nCountry_SK\nfrom \"my_duckdb\".\"main_staging\".\"staging_geo\"\ngroup by city, latitude, longitude, region, City_SK, Country_SK", "relation_name": "\"my_duckdb\".\"main_common\".\"dim_city\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.976229Z", "completed_at": "2025-05-16T09:53:43.978967Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.979400Z", "completed_at": "2025-05-16T09:53:43.979404Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004168987274169922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_country", "compiled": true, "compiled_code": "select country_code, country, Country_SK\nfrom \"my_duckdb\".\"main_staging\".\"staging_geo\"\ngroup by country_code, country, Country_SK", "relation_name": "\"my_duckdb\".\"main_common\".\"dim_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.981544Z", "completed_at": "2025-05-16T09:53:43.984236Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.984693Z", "completed_at": "2025-05-16T09:53:43.984698Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004118204116821289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_meal_category", "compiled": true, "compiled_code": "SELECT category_name, country_name, meal_country_category_sk\n\tFrom \"my_duckdb\".\"main_staging\".\"staging_meal_category_lookup\"\ngroup by category_name, country_name, meal_country_category_sk", "relation_name": "\"my_duckdb\".\"main_common\".\"dim_meal_category\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.986754Z", "completed_at": "2025-05-16T09:53:43.989455Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.989908Z", "completed_at": "2025-05-16T09:53:43.989913Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004130125045776367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_meal_country", "compiled": true, "compiled_code": "SELECT country_name, meal_country_sk\n\tFrom \"my_duckdb\".\"main_staging\".\"staging_meal_category_lookup\"\ngroup by country_name, meal_country_sk", "relation_name": "\"my_duckdb\".\"main_common\".\"dim_meal_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.991974Z", "completed_at": "2025-05-16T09:53:43.995032Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:43.995483Z", "completed_at": "2025-05-16T09:53:43.995487Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0045168399810791016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.staging_meal_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Staging_Meal_Consumption\n-- Description: Fact Table data, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT bc.meal_id as meal_id, bc.meal_name as meal_name,\nbc.category_name as category_name, bc.country_name as country_name,\n-- Dim SK\nbcl.meal_country_category_sk as meal_country_category_sk,\n\nbc.instructions as instructions, bc.meal_image_url as meal_image_url, bc.meal_youtube_url as meal_youtube_url, \nstr_ingredient1, str_ingredient2, str_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8, str_ingredient9, str_ingredient10, str_ingredient11, str_ingredient12, \nstr_ingredient13, str_ingredient14, str_ingredient15, str_ingredient16, str_ingredient17, str_ingredient18, \nstr_ingredient19, str_ingredient20, bc.meal_url as meal_url\n\t-- FROM public_base.base_beverage_consumption as bc\n    FROM \"my_duckdb\".\"main_base\".\"base_meal_consumption\" as bc\n\tleft join \"my_duckdb\".\"main_staging\".\"staging_meal_category_lookup\"  as bcl\n\ton bc.meal_id = bcl.meal_id", "relation_name": "\"my_duckdb\".\"main_staging\".\"staging_meal_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:43.997671Z", "completed_at": "2025-05-16T09:53:44.001104Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:44.001546Z", "completed_at": "2025-05-16T09:53:44.001566Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004900217056274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_meal_ingredient_hierarchy", "compiled": true, "compiled_code": "SELECT sil.meal_id, sil.ingredient_name as ingredient1\n,sil2.ingredient_name as ingredient2\n,sil3.ingredient_name as ingredient3\n,sil4.ingredient_name as ingredient4\nFROM \"my_duckdb\".\"main_staging\".\"staging_meal_ingredients_lookup\" as sil\n-- Second\nleft join \"my_duckdb\".\"main_staging\".\"staging_meal_ingredients_lookup\" as sil2\non sil.meal_id = sil2.meal_id and sil.ingredient_id != sil2.ingredient_id\n-- third\nleft join \"my_duckdb\".\"main_staging\".\"staging_meal_ingredients_lookup\" as sil3\non sil.meal_id = sil3.meal_id and sil3.ingredient_id not in (sil2.ingredient_id, sil.ingredient_id)\n-- Fourth\nleft join \"my_duckdb\".\"main_staging\".\"staging_meal_ingredients_lookup\" as sil4\non sil.meal_id = sil4.meal_id and sil4.ingredient_id not in (sil3.ingredient_id, sil2.ingredient_id, sil.ingredient_id)", "relation_name": "\"my_duckdb\".\"main_common\".\"dim_meal_ingredient_hierarchy\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:44.003623Z", "completed_at": "2025-05-16T09:53:44.006308Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:44.006777Z", "completed_at": "2025-05-16T09:53:44.006782Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004128694534301758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.dim_meal_ingredient_jointable", "compiled": true, "compiled_code": "SELECT distinct meal_id\n    from \"my_duckdb\".\"main_staging\".\"staging_meal_ingredients_lookup\" \n    where meal_id is not null", "relation_name": "\"my_duckdb\".\"main_common\".\"dim_meal_ingredient_jointable\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:44.008818Z", "completed_at": "2025-05-16T09:53:44.013133Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:44.013608Z", "completed_at": "2025-05-16T09:53:44.013613Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005763530731201172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.fact_beverage_consumption", "compiled": true, "compiled_code": "SELECT beverage_id, beverage_name, glass_type_sk, Beverage_Category_SK,Beverage_Type_SK, \nAlcoholic_Type_SK, Beverage_Type, Alcoholic_type,\nbeverage_instructions, beverage_url, Glass_Type, date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, \nstr_ingredient6, str_ingredient7, str_ingredient8\n    From \"my_duckdb\".\"main_staging\".\"staging_beverage_consumption\"", "relation_name": "\"my_duckdb\".\"main_common\".\"fact_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:44.015723Z", "completed_at": "2025-05-16T09:53:44.019497Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:44.019970Z", "completed_at": "2025-05-16T09:53:44.019975Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0052471160888671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_dim_city_city_sk.ab81b8c4f2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city_sk\nfrom \"my_duckdb\".\"main_common\".\"dim_city\"\nwhere city_sk is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:44.022044Z", "completed_at": "2025-05-16T09:53:44.025585Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:44.026033Z", "completed_at": "2025-05-16T09:53:44.026037Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004964113235473633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_dim_city_city_sk.c481aa01d2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    city_sk as unique_field,\n    count(*) as n_records\n\nfrom \"my_duckdb\".\"main_common\".\"dim_city\"\nwhere city_sk is not null\ngroup by city_sk\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:44.028097Z", "completed_at": "2025-05-16T09:53:44.031872Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:44.032323Z", "completed_at": "2025-05-16T09:53:44.032328Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005209445953369141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.not_null_dim_country_country_sk.86f12ec03d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_sk\nfrom \"my_duckdb\".\"main_common\".\"dim_country\"\nwhere country_sk is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:44.034463Z", "completed_at": "2025-05-16T09:53:44.038083Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:44.038524Z", "completed_at": "2025-05-16T09:53:44.038529Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0050449371337890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.CamOnDagster.unique_dim_country_country_sk.76e889bc85", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    country_sk as unique_field,\n    count(*) as n_records\n\nfrom \"my_duckdb\".\"main_common\".\"dim_country\"\nwhere country_sk is not null\ngroup by country_sk\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-16T09:53:44.040638Z", "completed_at": "2025-05-16T09:53:44.043410Z"}, {"name": "execute", "started_at": "2025-05-16T09:53:44.043882Z", "completed_at": "2025-05-16T09:53:44.043887Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004227399826049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.CamOnDagster.fact_meal_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Fact_Meal_Consumption\n-- Description: Fact Table, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT meal_id, meal_name,\ncategory_name, country_name,\nmeal_country_category_sk,\ninstructions, meal_image_url, meal_youtube_url, \nstr_ingredient1, str_ingredient2, str_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8, str_ingredient9, str_ingredient10, str_ingredient11, str_ingredient12, \nstr_ingredient13, str_ingredient14, str_ingredient15, str_ingredient16, str_ingredient17, str_ingredient18, \nstr_ingredient19, str_ingredient20, meal_url\nFROM \"my_duckdb\".\"main_staging\".\"staging_meal_consumption\"", "relation_name": "\"my_duckdb\".\"main_common\".\"fact_meal_consumption\"", "batch_results": null}], "elapsed_time": 0.573857307434082, "args": {"compile": true, "populate_cache": true, "state_modified_compare_vars": false, "strict_mode": false, "use_colors_file": true, "require_batched_execution_for_custom_microbatch_strategy": false, "write_json": true, "static_parser": true, "use_colors": true, "partial_parse_file_diff": true, "warn_error_options": {"include": [], "exclude": []}, "static": false, "exclude": [], "log_format": "default", "log_path": "/home/runner/work/CamOnDagsterDbt/CamOnDagsterDbt/dbt/logs", "invocation_command": "dbt docs generate", "empty_catalog": false, "require_explicit_package_overrides_for_builtin_materializations": true, "vars": {}, "skip_nodes_if_on_run_start_fails": false, "partial_parse": true, "indirect_selection": "eager", "macro_debugging": false, "print": true, "require_nested_cumulative_type_params": false, "require_resource_names_without_spaces": false, "profiles_dir": "/home/runner/.dbt", "state_modified_compare_more_unrendered_values": false, "log_level": "info", "require_yaml_configuration_for_mf_time_spines": false, "quiet": false, "project_dir": "/home/runner/work/CamOnDagsterDbt/CamOnDagsterDbt/dbt", "favor_state": false, "source_freshness_run_project_hooks": false, "send_anonymous_usage_stats": true, "log_file_max_bytes": 10485760, "cache_selected_only": false, "which": "generate", "show_resource_report": false, "select": [], "printer_width": 80, "log_format_file": "debug", "version_check": true, "defer": false, "introspect": true, "log_level_file": "debug"}}