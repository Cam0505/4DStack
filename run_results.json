{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-05-18T13:25:00.355571Z", "invocation_id": "28c521e3-1ade-4c18-8a0f-84da69aa2598", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.593262Z", "completed_at": "2025-05-18T13:24:59.605030Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.605564Z", "completed_at": "2025-05-18T13:24:59.605576Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014520645141601562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_beverage_consumption", "compiled": true, "compiled_code": "SELECT id_drink, str_drink, str_category, str_alcoholic, str_glass, str_instructions, \nstr_drink_thumb, (date_modified AT TIME ZONE 'Australia/Melbourne')::date AS date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8\n\t-- FROM cocktail_data.consumption\n    from \"camondagster\".\"beverage_data\".\"consumption\"", "relation_name": "\"camondagster\".\"public_base\".\"base_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.598433Z", "completed_at": "2025-05-18T13:24:59.606317Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.607367Z", "completed_at": "2025-05-18T13:24:59.607377Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015720129013061523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_beverage_glass_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Beverage_glass_lookup\n-- Description: Beverage Glass Type Dim Base Table\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSelect str_glass as Glass_Type,\nmd5(cast(coalesce(cast(str_glass as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as Glass_Type_SK\nfrom \"camondagster\".\"beverage_data\".\"glasses\"", "relation_name": "\"camondagster\".\"public_base\".\"base_beverage_glass_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.610447Z", "completed_at": "2025-05-18T13:24:59.619633Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.620166Z", "completed_at": "2025-05-18T13:24:59.620173Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012015819549560547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_beverage_ingredients_lookup", "compiled": true, "compiled_code": "Select str_ingredient1 as Ingredient,\nit.id_drink as beverage_id,\nit.str_drink as Beverage_Name\nfrom \"camondagster\".\"beverage_data\".\"ingredients\" as i \nleft join \"camondagster\".\"beverage_data\".\"ingredients_table\"  as it\n\ton i.str_ingredient1 = it.source_ingredient\nwhere it.id_drink is not null", "relation_name": "\"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.614160Z", "completed_at": "2025-05-18T13:24:59.622619Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.625835Z", "completed_at": "2025-05-18T13:24:59.625845Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016021728515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_beverages", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Beverages\n-- Description: Base Table for multiple Dims - Bev Type, Alcoholic Type and Beverage Name\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nselect bt.str_drink as beverage_name, \n    bt.id_drink as beverage_id, \n\tbt.source_beverage_type as beverage_type,\n\tmd5(cast(coalesce(cast(source_beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_alcohol_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_category_sk,\n\tact.source_alcohol_type as alcoholic_type\n\tfrom \"camondagster\".\"beverage_data\".\"beverages_table\" as bt\n    left join \"camondagster\".\"beverage_data\".\"alcoholic_table\" as act \n\ton bt.id_drink = act.id_drink", "relation_name": "\"camondagster\".\"public_base\".\"base_beverages\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.623123Z", "completed_at": "2025-05-18T13:24:59.631398Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.632108Z", "completed_at": "2025-05-18T13:24:59.632114Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01071310043334961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_geo", "compiled": true, "compiled_code": "SELECT city_id, city, latitude, longitude, country_code, country, region, continent\nFrom \"camondagster\".\"geo_data\".\"geo_cities\" \nwhere country in ('New Zealand', 'United Kingdom', 'Australia', 'Canada')", "relation_name": "\"camondagster\".\"public_base\".\"base_geo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.628617Z", "completed_at": "2025-05-18T13:24:59.633433Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.634604Z", "completed_at": "2025-05-18T13:24:59.634611Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007291078567504883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_gsheets_finance", "compiled": true, "compiled_code": "SELECT \n    Id, \n    stock, \n    CAST(price AS DECIMAL) AS price,  -- DuckDB doesn't have a money type\n    date_time AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS date_time,\n    ROUND((MAX(price) OVER(PARTITION BY stock) - MIN(price) OVER(PARTITION BY stock)), 2) AS price_spread,\n    ROUND((LAST(price) OVER(PARTITION BY stock ORDER BY date_time) - FIRST(price) OVER(PARTITION BY stock)), 2) AS relative_price_movement,\n    ROUND((LAST(price) OVER(PARTITION BY stock) - FIRST(price) OVER(PARTITION BY stock)), 2) AS abs_price_movement,\n    COUNT(id) OVER(PARTITION BY stock) AS Num_Stock_Entries\nFROM \"camondagster\".\"google_sheets_data\".\"gsheets_finance\"", "relation_name": "\"camondagster\".\"public_base\".\"base_gsheets_finance\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.636435Z", "completed_at": "2025-05-18T13:24:59.644357Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.644861Z", "completed_at": "2025-05-18T13:24:59.644867Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010894536972045898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_meal_category_country", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_meal_category_country\n-- Description: Base Table for multiple Dims - meal category, meal country\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT ct.str_meal as meal_name, ct.id_meal as meal_id, \n\tct.source_country as country_name,\n\tmd5(cast(coalesce(cast(source_country as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_category as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as meal_country_category_sk,\n\tcat.source_category as category_name\nFROM \"camondagster\".\"meals_data\".\"country_table\" as ct\n\tleft join \"camondagster\".\"meals_data\".\"category_table\" as cat \n\ton ct.id_meal = cat.id_meal", "relation_name": "\"camondagster\".\"public_base\".\"base_meal_category_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.641456Z", "completed_at": "2025-05-18T13:24:59.646560Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.647693Z", "completed_at": "2025-05-18T13:24:59.647702Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007410764694213867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_meal_consumption", "compiled": true, "compiled_code": "select id_meal as meal_id, str_meal as meal_name, str_category as category_name, str_area as country_name, \nstr_instructions as instructions, str_meal_thumb as meal_image_url, str_youtube as meal_youtube_url, \nNULLIF(str_ingredient1, '') as str_ingredient1, \nNULLIF(str_ingredient2, '') as str_ingredient2,\nNULLIF(str_ingredient3, '') as str_ingredient3,\nNULLIF(str_ingredient4, '') as str_ingredient4,\nNULLIF(str_ingredient5, '') as str_ingredient5,\nNULLIF(str_ingredient6, '') as str_ingredient6,\nNULLIF(str_ingredient7, '') as str_ingredient7, \nNULLIF(str_ingredient8, '') as str_ingredient8,\nNULLIF(str_ingredient9, '') as str_ingredient9,\nNULLIF(str_ingredient10, '') as str_ingredient10,\nNULLIF(str_ingredient11, '') as str_ingredient11,\nNULLIF(str_ingredient12, '') as str_ingredient12,\nNULLIF(str_ingredient13, '') as str_ingredient13,\nNULLIF(str_ingredient14, '') as str_ingredient14,\nNULLIF(str_ingredient15, '') as str_ingredient15,\nNULLIF(str_ingredient16, '') as str_ingredient16,\nNULLIF(str_ingredient17, '') as str_ingredient17,\nNULLIF(str_ingredient18, '') as str_ingredient18,\nNULLIF(str_ingredient19, '') as str_ingredient19,\nNULLIF(str_ingredient20, '') as str_ingredient20,\nstr_source as meal_url\n    from \"camondagster\".\"meals_data\".\"consumption\"", "relation_name": "\"camondagster\".\"public_base\".\"base_meal_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.648409Z", "completed_at": "2025-05-18T13:24:59.653051Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.656292Z", "completed_at": "2025-05-18T13:24:59.656298Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010324239730834961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_meal_ingredient_table", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_meal_ingredient_table\n-- Description: Base Table for list of meals for each ingredient\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT str_meal as meal_name, id_meal as meal_id, \nsource_ingredient as ingredient_name\nFROM \"camondagster\".\"meals_data\".\"ingredient_table\"", "relation_name": "\"camondagster\".\"public_base\".\"base_meal_ingredient_table\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.653516Z", "completed_at": "2025-05-18T13:24:59.662830Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.663624Z", "completed_at": "2025-05-18T13:24:59.663631Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011624336242675781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_meal_ingredients", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_meal_ingredients\n-- Description: Base Table for meal ingredients\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT id_ingredient as ingredient_id, str_ingredient as ingredient_name\nFROM \"camondagster\".\"meals_data\".\"ingredients\"", "relation_name": "\"camondagster\".\"public_base\".\"base_meal_ingredients\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.658921Z", "completed_at": "2025-05-18T13:24:59.670353Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.670975Z", "completed_at": "2025-05-18T13:24:59.670981Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013262033462524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_openlibrary", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Beverage_openlibrary\n-- Description: Unioning Tables with Books seperated by Search and Filter term\n-- from the OpenLibrary API, the point of this is to test using both DLT State\n-- & DuckDb connection to check for New API data (via DLT State) and deleted or\n-- truncation data loss with DuckDB sql comparison with DLT State.\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-15 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"sql_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"python_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"data_warehousing_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"data_engineering_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"apache_airflow_books\"", "relation_name": "\"camondagster\".\"public_base\".\"base_openlibrary\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.666049Z", "completed_at": "2025-05-18T13:24:59.672909Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.673977Z", "completed_at": "2025-05-18T13:24:59.673982Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009114980697631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_character_episode", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_character_episode\n-- Description: Base join table\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT\n  _dlt_root_id AS character_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS episode_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"character__episode\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_character_episode\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.674694Z", "completed_at": "2025-05-18T13:24:59.679053Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.682293Z", "completed_at": "2025-05-18T13:24:59.682299Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01003265380859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_characters", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_characters\n-- Description: Base Table for ricky and morty characters from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nSELECT id as character_id, name as character_name, status as character_status, \nspecies as character_species, gender as character_gender, \norigin__name as character_origin, \nlocation__name as character_first_location, location__url as character_first_location_url, \nimage as character_image, url as character_url, \ncreated AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS character_created\n, \"_dlt_id\" as character_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"character\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_characters\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.679514Z", "completed_at": "2025-05-18T13:24:59.687635Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.688169Z", "completed_at": "2025-05-18T13:24:59.688175Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01016545295715332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_episode_character", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_episode_character\n-- Description: Base join table\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT\n  _dlt_root_id AS episode_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS character_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"episode__characters\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_episode_character\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.684781Z", "completed_at": "2025-05-18T13:24:59.688901Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.689960Z", "completed_at": "2025-05-18T13:24:59.689966Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0063629150390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_episodes", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_rm_episode\n-- Description: Base Table for ricky and morty episodes from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nSELECT id as episode_id, name as episode_name\n,STRPTIME(air_date, '%B %d, %Y') AS episode_air_date\n, episode, url as episode_url\n,created AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS episode_created \n,\"_dlt_id\" as episode_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"episode\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_episodes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.692816Z", "completed_at": "2025-05-18T13:24:59.698934Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.699636Z", "completed_at": "2025-05-18T13:24:59.699642Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009058952331542969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_location_residents", "compiled": true, "compiled_code": "SELECT\n  _dlt_root_id AS location_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS character_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"location__residents\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_location_residents\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.696197Z", "completed_at": "2025-05-18T13:24:59.700413Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.701507Z", "completed_at": "2025-05-18T13:24:59.701512Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009406805038452148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_locations", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_rm_locations\n-- Description: Base Table for ricky and morty locations from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT id as location_id, name as location_name, type as location_type, \ndimension as location_dimension, url as location_url\n,created AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS location_created\n,\"_dlt_id\" as location_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"location\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_locations\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.704473Z", "completed_at": "2025-05-18T13:24:59.710526Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.711204Z", "completed_at": "2025-05-18T13:24:59.711210Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00906682014465332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_weather", "compiled": true, "compiled_code": "SELECT (date)::date as weather_date, city, temperature_max, temperature_min, temperature_mean, precipitation_sum, \nwindspeed_max, windgusts_max, sunshine_duration, location__lat as latitude, location__lng as longitude\nFROM \"camondagster\".\"weather_data\".\"daily_weather\"", "relation_name": "\"camondagster\".\"public_base\".\"base_weather\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.707788Z", "completed_at": "2025-05-18T13:24:59.711979Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.715012Z", "completed_at": "2025-05-18T13:24:59.715018Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01121377944946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_beverage_ingredient_jointable", "compiled": true, "compiled_code": "SELECT distinct id_drink as Beverage_ID\n    from \"camondagster\".\"beverage_data\".\"ingredients_table\" as it\n    where id_drink is not null", "relation_name": "\"camondagster\".\"public_common\".\"dim_beverage_ingredient_jointable\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.717775Z", "completed_at": "2025-05-18T13:24:59.728257Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.728902Z", "completed_at": "2025-05-18T13:24:59.728909Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013253927230834961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_date", "compiled": true, "compiled_code": "WITH RECURSIVE date_series AS (\n    SELECT DATE '2000-01-01' AS date\n    UNION ALL\n    SELECT date + INTERVAL '1 day'\n    FROM date_series\n    WHERE date + INTERVAL '1 day' < DATE '2030-01-01'\n)\nSELECT\n    date AS date_col,\n    EXTRACT(YEAR FROM date) AS year,\n    EXTRACT(MONTH FROM date) AS month,\n    EXTRACT(DAY FROM date) AS day,\n    strftime('%B', date) AS month_name,  -- Replacing TO_CHAR with strftime\n    strftime('%A', date) AS weekday_name,  -- Replacing TO_CHAR with strftime\n    EXTRACT(DOW FROM date) AS day_of_week,\n    CASE WHEN EXTRACT(DOW FROM date) IN (0, 6) THEN TRUE ELSE FALSE END AS is_weekend,\n    EXTRACT(DOY FROM date) AS day_of_year,\n    EXTRACT(WEEK FROM date) AS week_of_year,\n    EXTRACT(QUARTER FROM date) AS quarter\nFROM date_series", "relation_name": "\"camondagster\".\"public_common\".\"dim_date\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.720295Z", "completed_at": "2025-05-18T13:24:59.731330Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.735754Z", "completed_at": "2025-05-18T13:24:59.735761Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018606185913085938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_gsheets_gsheets_finance_id.3104f01e33", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"camondagster\".\"google_sheets_data\".\"gsheets_finance\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.731884Z", "completed_at": "2025-05-18T13:24:59.741868Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.742530Z", "completed_at": "2025-05-18T13:24:59.742535Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012417793273925781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_openlibrary_apache_airflow_books_key.013e7c07bb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"openlibrary_data\".\"apache_airflow_books\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.738222Z", "completed_at": "2025-05-18T13:24:59.743226Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.744246Z", "completed_at": "2025-05-18T13:24:59.744252Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007144451141357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_openlibrary_data_engineering_books_key.066b4bba14", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"openlibrary_data\".\"data_engineering_books\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.747073Z", "completed_at": "2025-05-18T13:24:59.755284Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.756348Z", "completed_at": "2025-05-18T13:24:59.756354Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011419057846069336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_openlibrary_data_warehousing_books_key.8ca1507d40", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"openlibrary_data\".\"data_warehousing_books\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.751483Z", "completed_at": "2025-05-18T13:24:59.755867Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.757095Z", "completed_at": "2025-05-18T13:24:59.757100Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010619640350341797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_openlibrary_python_books_key.2e25c37883", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"openlibrary_data\".\"python_books\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.760988Z", "completed_at": "2025-05-18T13:24:59.772449Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.772956Z", "completed_at": "2025-05-18T13:24:59.772961Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014029741287231445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_openlibrary_sql_books_key.7dea3fa6c0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"openlibrary_data\".\"sql_books\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.764775Z", "completed_at": "2025-05-18T13:24:59.773685Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.774706Z", "completed_at": "2025-05-18T13:24:59.774711Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015277862548828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_gsheets_gsheets_finance_id.edff15d707", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"google_sheets_data\".\"gsheets_finance\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.777476Z", "completed_at": "2025-05-18T13:24:59.785693Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.786757Z", "completed_at": "2025-05-18T13:24:59.786762Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011440753936767578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_openlibrary_apache_airflow_books_key.e5a73d623a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"openlibrary_data\".\"apache_airflow_books\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.781908Z", "completed_at": "2025-05-18T13:24:59.786273Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.787478Z", "completed_at": "2025-05-18T13:24:59.787483Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010581493377685547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_openlibrary_data_engineering_books_key.a0d050f7e4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"openlibrary_data\".\"data_engineering_books\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.791258Z", "completed_at": "2025-05-18T13:24:59.798857Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.799467Z", "completed_at": "2025-05-18T13:24:59.799472Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010282754898071289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_openlibrary_data_warehousing_books_key.3496bcbb08", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"openlibrary_data\".\"data_warehousing_books\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.794995Z", "completed_at": "2025-05-18T13:24:59.800157Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.801163Z", "completed_at": "2025-05-18T13:24:59.801168Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011564493179321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_openlibrary_python_books_key.00e67edb2f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"openlibrary_data\".\"python_books\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.804119Z", "completed_at": "2025-05-18T13:24:59.811998Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.812670Z", "completed_at": "2025-05-18T13:24:59.812675Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010661602020263672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_openlibrary_sql_books_key.780888e7a3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"openlibrary_data\".\"sql_books\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.814932Z", "completed_at": "2025-05-18T13:24:59.819274Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.819800Z", "completed_at": "2025-05-18T13:24:59.819806Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005956172943115234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.camondagster.glass_type_snapshot", "compiled": true, "compiled_code": "\n\n\n\nSELECT \n    Glass_Type,\n    Glass_Type_SK\nFROM \"camondagster\".\"public_base\".\"base_beverage_glass_lookup\" \n", "relation_name": "\"camondagster\".\"public_snapshots\".\"glass_type_snapshot\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.808359Z", "completed_at": "2025-05-18T13:24:59.820626Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.821742Z", "completed_at": "2025-05-18T13:24:59.821748Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018197298049926758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_beverage_consumption_id_drink.561caf7667", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_drink\nfrom \"camondagster\".\"public_base\".\"base_beverage_consumption\"\nwhere id_drink is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.824505Z", "completed_at": "2025-05-18T13:24:59.832377Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.833429Z", "completed_at": "2025-05-18T13:24:59.833436Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011067867279052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_beverage_glass_lookup_glass_type.af0bc394b6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect glass_type\nfrom \"camondagster\".\"public_base\".\"base_beverage_glass_lookup\"\nwhere glass_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.828809Z", "completed_at": "2025-05-18T13:24:59.832951Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.834165Z", "completed_at": "2025-05-18T13:24:59.834170Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010335206985473633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_beverage_glass_lookup_glass_type.ad28035660", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    glass_type as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_beverage_glass_lookup\"\nwhere glass_type is not null\ngroup by glass_type\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.838051Z", "completed_at": "2025-05-18T13:24:59.846837Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.847325Z", "completed_at": "2025-05-18T13:24:59.847332Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011325836181640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_beverage_ingredient_hierarchy", "compiled": true, "compiled_code": "SELECT bil.ingredient, bil.beverage_id, bil.beverage_name\n\t,bil2.ingredient as ingredient2\n\t,bil3.ingredient as ingredient3\n\t,bil4.ingredient as ingredient4\n\t,bil5.ingredient as ingredient5\n\t,bil6.ingredient as ingredient6\n\t,bil7.ingredient as ingredient7\n\t-- FROM public_base.base_beverage_ingredients_lookup as bil\n    from \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil\n\t-- Second\n\t-- left join public_base.base_beverage_ingredients_lookup as bil2 \n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil2\n\ton bil.beverage_id = bil2.beverage_id and bil.ingredient != bil2.ingredient\n\t-- Third\n\t-- left join public_base.base_beverage_ingredients_lookup as bil3\n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil3\n\ton bil.beverage_id = bil3.beverage_id and bil3.ingredient not in (bil2.ingredient, bil.ingredient)\n\t-- Fourth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil4\n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil4\n\ton bil.beverage_id = bil4.beverage_id and bil4.ingredient not in (bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- Fifth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil5\n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil5\n\ton bil.beverage_id = bil5.beverage_id and bil5.ingredient not in (bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- sixth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil6\n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil6\n\ton bil.beverage_id = bil6.beverage_id and bil6.ingredient not in (bil5.ingredient, bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- seventh\n\t-- left join public_base.base_beverage_ingredients_lookup as bil7\n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil7\n\ton bil.beverage_id = bil7.beverage_id and bil7.ingredient not in (bil6.ingredient, bil5.ingredient, bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n-- \twhere bil.beverage_id = '17836'\n\torder by ingredient desc, beverage_name desc, ingredient2 desc", "relation_name": "\"camondagster\".\"public_common\".\"dim_beverage_ingredient_hierarchy\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.842036Z", "completed_at": "2025-05-18T13:24:59.848659Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.849638Z", "completed_at": "2025-05-18T13:24:59.849644Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013127326965332031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_beverage_ingredients_lookup_ingredient__beverage_id.b326d9a641", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ingredient, beverage_id\n    from \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\"\n    group by ingredient, beverage_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.851394Z", "completed_at": "2025-05-18T13:24:59.860947Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.861593Z", "completed_at": "2025-05-18T13:24:59.861599Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012556791305541992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_beverage_lookup", "compiled": true, "compiled_code": "select beverage_name, \n\t-- used in dim_beverage to connect to consumption\n    beverage_id, \n\tbeverage_type,\n\t-- used in dim_beverage and dim_beverage_type as the connection\n\tmd5(cast(coalesce(cast(beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_type_sk,\n\t-- used in dim_alcoholic_type and dim_beverage_type as connection\n\tmd5(cast(coalesce(cast(beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(alcoholic_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_category_sk,\n\talcoholic_type,\n\t-- in dim_alcoholic_type encase any future fact tables need to connect directly \n\tmd5(cast(coalesce(cast(alcoholic_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as alcoholic_type_sk\n    from \"camondagster\".\"public_base\".\"base_beverages\"", "relation_name": "\"camondagster\".\"public_staging\".\"staging_beverage_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.857107Z", "completed_at": "2025-05-18T13:24:59.862273Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.863444Z", "completed_at": "2025-05-18T13:24:59.863449Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007626056671142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.accepted_values_base_beverages_alcoholic_type__True__Non_alcoholic__Optional_alcohol__Alcoholic.34c9662782", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        alcoholic_type as value_field,\n        count(*) as n_records\n\n    from \"camondagster\".\"public_base\".\"base_beverages\"\n    group by alcoholic_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Non alcoholic','Optional alcohol','Alcoholic'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.866448Z", "completed_at": "2025-05-18T13:24:59.876189Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.876760Z", "completed_at": "2025-05-18T13:24:59.876766Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012488842010498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_beverages_beverage_id.b8f3d5637e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect beverage_id\nfrom \"camondagster\".\"public_base\".\"base_beverages\"\nwhere beverage_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.872454Z", "completed_at": "2025-05-18T13:24:59.878564Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.879512Z", "completed_at": "2025-05-18T13:24:59.879517Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013668298721313477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_beverages_beverage_name.4ae5d66d1b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect beverage_name\nfrom \"camondagster\".\"public_base\".\"base_beverages\"\nwhere beverage_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.880229Z", "completed_at": "2025-05-18T13:24:59.890068Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.890682Z", "completed_at": "2025-05-18T13:24:59.890687Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012701749801635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.relationships_base_beverage_consumption_id_drink__beverage_id__ref_base_beverages_.e5e651a6ba", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select id_drink as from_field\n    from \"camondagster\".\"public_base\".\"base_beverage_consumption\"\n    where id_drink is not null\n),\n\nparent as (\n    select beverage_id as to_field\n    from \"camondagster\".\"public_base\".\"base_beverages\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.886428Z", "completed_at": "2025-05-18T13:24:59.891986Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.892953Z", "completed_at": "2025-05-18T13:24:59.892959Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007579326629638672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_beverages_beverage_id.fca0ee3980", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    beverage_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_beverages\"\nwhere beverage_id is not null\ngroup by beverage_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.894665Z", "completed_at": "2025-05-18T13:24:59.903730Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.904376Z", "completed_at": "2025-05-18T13:24:59.904383Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012053489685058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_beverages_beverage_name.a2d4fd1356", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    beverage_name as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_beverages\"\nwhere beverage_name is not null\ngroup by beverage_name\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.899725Z", "completed_at": "2025-05-18T13:24:59.906241Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.907201Z", "completed_at": "2025-05-18T13:24:59.907206Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00885772705078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_geo", "compiled": true, "compiled_code": "select city_id, city, latitude, longitude, country_code, country, region, \nmd5(cast(coalesce(cast(city as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as City_SK,\nmd5(cast(coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as Country_SK\nfrom \"camondagster\".\"public_base\".\"base_geo\"", "relation_name": "\"camondagster\".\"public_staging\".\"staging_geo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.907932Z", "completed_at": "2025-05-18T13:24:59.919730Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.920279Z", "completed_at": "2025-05-18T13:24:59.920286Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01459503173828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.accepted_values_base_geo_country_code__True__AU__NZ__CA__GB.a3d3afa24f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        country_code as value_field,\n        count(*) as n_records\n\n    from \"camondagster\".\"public_base\".\"base_geo\"\n    group by country_code\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'AU','NZ','CA','GB'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.913530Z", "completed_at": "2025-05-18T13:24:59.921608Z"}, {"name": "execute", "started_at": "2025-05-18T13:24:59.922560Z", "completed_at": "2025-05-18T13:24:59.922565Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010162591934204102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_expectations_expect_column_values_to_be_between_base_geo_latitude__90___90__False.c3084ce8f0", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and latitude >= -90 and latitude <= 90\n)\n as expression\n\n\n    from \"camondagster\".\"public_base\".\"base_geo\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:24:59.924288Z", "completed_at": "2025-05-18T13:25:00.007115Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.007767Z", "completed_at": "2025-05-18T13:25:00.007776Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08580803871154785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_expectations_expect_column_values_to_be_between_base_geo_longitude__180___180__False.5d5a8f0a6a", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and longitude >= -180 and longitude <= 180\n)\n as expression\n\n\n    from \"camondagster\".\"public_base\".\"base_geo\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.003248Z", "completed_at": "2025-05-18T13:25:00.008495Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.009530Z", "completed_at": "2025-05-18T13:25:00.009535Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007738828659057617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_geo_city_id.94562eb347", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city_id\nfrom \"camondagster\".\"public_base\".\"base_geo\"\nwhere city_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.012378Z", "completed_at": "2025-05-18T13:25:00.020477Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.021050Z", "completed_at": "2025-05-18T13:25:00.021056Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01080012321472168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_geo_city_id.a4c893fe58", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    city_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_geo\"\nwhere city_id is not null\ngroup by city_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.016737Z", "completed_at": "2025-05-18T13:25:00.022936Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.023873Z", "completed_at": "2025-05-18T13:25:00.023878Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012071371078491211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_gsheets_finance_id.0d75c08608", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"camondagster\".\"public_base\".\"base_gsheets_finance\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.024561Z", "completed_at": "2025-05-18T13:25:00.030031Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.033880Z", "completed_at": "2025-05-18T13:25:00.033886Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011654138565063477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_gsheets_finance_id.81717edef5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_gsheets_finance\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.030485Z", "completed_at": "2025-05-18T13:25:00.040129Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.040780Z", "completed_at": "2025-05-18T13:25:00.040786Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011837959289550781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_meal_category_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: staging_meal_category_lookup\n-- Description: Staging Table, lookup for category and country per meal, used for Dim\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT \n\tmeal_name, \n\tmeal_id, category_name,  \n\t-- Used in Dim_Meal_Category and Dim_Meal_Country\n\tmeal_country_category_sk,\n\tcountry_name,\n\t-- In Dim_Meal_Country encase any future fact tables need to connect directly \n\tmd5(cast(coalesce(cast(country_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as meal_country_sk\n    From \"camondagster\".\"public_base\".\"base_meal_category_country\"", "relation_name": "\"camondagster\".\"public_staging\".\"staging_meal_category_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.036314Z", "completed_at": "2025-05-18T13:25:00.043212Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.049062Z", "completed_at": "2025-05-18T13:25:00.049068Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013943910598754883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_meal_category_country_meal_id.f1fc6a2e02", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect meal_id\nfrom \"camondagster\".\"public_base\".\"base_meal_category_country\"\nwhere meal_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.043744Z", "completed_at": "2025-05-18T13:25:00.055361Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.055980Z", "completed_at": "2025-05-18T13:25:00.055985Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013974905014038086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_meal_category_country_meal_id.96de22ba03", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    meal_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_meal_category_country\"\nwhere meal_id is not null\ngroup by meal_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.051616Z", "completed_at": "2025-05-18T13:25:00.062765Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.063449Z", "completed_at": "2025-05-18T13:25:00.063455Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013004779815673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_meal_consumption_meal_id.5801469d88", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect meal_id\nfrom \"camondagster\".\"public_base\".\"base_meal_consumption\"\nwhere meal_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.058261Z", "completed_at": "2025-05-18T13:25:00.065789Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.070244Z", "completed_at": "2025-05-18T13:25:00.070251Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013139486312866211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.relationships_base_meal_consumption_meal_id__meal_id__ref_base_meal_category_country_.ebae62c8a2", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select meal_id as from_field\n    from \"camondagster\".\"public_base\".\"base_meal_consumption\"\n    where meal_id is not null\n),\n\nparent as (\n    select meal_id as to_field\n    from \"camondagster\".\"public_base\".\"base_meal_category_country\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.073456Z", "completed_at": "2025-05-18T13:25:00.076753Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.077240Z", "completed_at": "2025-05-18T13:25:00.077245Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005563974380493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_meal_ingredients_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: staging_meal_ingredients_lookup\n-- Description: Staging Table, lookup for Ingredients for each meal, used for Dim\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT mit.meal_name, mit.meal_id, mit.ingredient_name, mi.ingredient_id\n\tFROM \"camondagster\".\"public_base\".\"base_meal_ingredient_table\" as mit \n\tleft join \"camondagster\".\"public_base\".\"base_meal_ingredients\" as mi \n\ton mit.ingredient_name = mi.ingredient_name", "relation_name": "\"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.066273Z", "completed_at": "2025-05-18T13:25:00.077979Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.079076Z", "completed_at": "2025-05-18T13:25:00.079083Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01430201530456543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_meal_ingredient_table_ingredient_name__meal_id.319098ed2d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ingredient_name, meal_id\n    from \"camondagster\".\"public_base\".\"base_meal_ingredient_table\"\n    group by ingredient_name, meal_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.081992Z", "completed_at": "2025-05-18T13:25:00.090223Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.091332Z", "completed_at": "2025-05-18T13:25:00.091338Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011509418487548828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_meal_ingredients_ingredient_id.0a9dcc549e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingredient_id\nfrom \"camondagster\".\"public_base\".\"base_meal_ingredients\"\nwhere ingredient_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.086361Z", "completed_at": "2025-05-18T13:25:00.090873Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.092081Z", "completed_at": "2025-05-18T13:25:00.092086Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010809659957885742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_meal_ingredients_ingredient_id.a78af5b0c2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ingredient_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_meal_ingredients\"\nwhere ingredient_id is not null\ngroup by ingredient_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.101154Z", "completed_at": "2025-05-18T13:25:00.105221Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.105729Z", "completed_at": "2025-05-18T13:25:00.105734Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011269330978393555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_openlibrary_key.c2996aab1f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_openlibrary\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.096011Z", "completed_at": "2025-05-18T13:25:00.111848Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.112540Z", "completed_at": "2025-05-18T13:25:00.112546Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01862812042236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_openlibrary_key.4f2c5727d5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"public_base\".\"base_openlibrary\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.108055Z", "completed_at": "2025-05-18T13:25:00.114433Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.115397Z", "completed_at": "2025-05-18T13:25:00.115402Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008502006530761719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_rm_character_episode_character_dlt_id__episode_id.54e2562ff2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        character_dlt_id, episode_id\n    from \"camondagster\".\"public_base\".\"base_rm_character_episode\"\n    group by character_dlt_id, episode_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.116118Z", "completed_at": "2025-05-18T13:25:00.125327Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.125984Z", "completed_at": "2025-05-18T13:25:00.125990Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012134313583374023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_rm_characters", "compiled": true, "compiled_code": "with episodes_per_character as (\n  \n(\n    SELECT\n        \n            character_dlt_id\n        ,\n        COUNT(episode_id) AS Num_Episodes\n    FROM \"camondagster\".\"public_base\".\"base_rm_character_episode\"\n    GROUP BY\n        \n            character_dlt_id\n        \n)\n \n)\n\nSELECT bc.character_id, character_name, \nCASE\n    WHEN regexp_matches(character_name, '^Rick\\b', 'i') THEN 'Rick'\n    WHEN regexp_matches(character_name, '^Morty\\b', 'i') THEN 'Morty'\n    WHEN regexp_matches(character_name, '^Summer\\b', 'i') THEN 'Summer'\n    WHEN regexp_matches(character_name, '^Beth\\b', 'i') THEN 'Beth'\n    WHEN regexp_matches(character_name, '^Jerry\\b', 'i') THEN 'Jerry'\n    ELSE 'Other'\n  END AS character_group,\ncharacter_status, character_species, \ncharacter_gender, character_origin,\ncharacter_image, character_created, bc.character_dlt_id, epc.Num_Episodes\nFROM \"camondagster\".\"public_base\".\"base_rm_characters\" as bc \nleft join episodes_per_character as epc\non bc.character_dlt_id = epc.character_dlt_id\norder by bc.character_id", "relation_name": "\"camondagster\".\"public_staging\".\"staging_rm_characters\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.121298Z", "completed_at": "2025-05-18T13:25:00.126708Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.127805Z", "completed_at": "2025-05-18T13:25:00.127810Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0076677799224853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.accepted_values_base_rm_characters_character_gender__True__Genderless__Male__Female__unknown.46d64263d5", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        character_gender as value_field,\n        count(*) as n_records\n\n    from \"camondagster\".\"public_base\".\"base_rm_characters\"\n    group by character_gender\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Genderless','Male','Female','unknown'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.130660Z", "completed_at": "2025-05-18T13:25:00.138856Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.139451Z", "completed_at": "2025-05-18T13:25:00.139457Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011034727096557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.accepted_values_base_rm_characters_character_status__True__Alive__unknown__Dead.a8b2d7ed1c", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        character_status as value_field,\n        count(*) as n_records\n\n    from \"camondagster\".\"public_base\".\"base_rm_characters\"\n    group by character_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Alive','unknown','Dead'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.135092Z", "completed_at": "2025-05-18T13:25:00.140302Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.141336Z", "completed_at": "2025-05-18T13:25:00.141341Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011325597763061523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_rm_characters_character_id.43c52019f3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect character_id\nfrom \"camondagster\".\"public_base\".\"base_rm_characters\"\nwhere character_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.144106Z", "completed_at": "2025-05-18T13:25:00.154030Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.154715Z", "completed_at": "2025-05-18T13:25:00.154721Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012747049331665039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_rm_characters_character_id.6dc0db618b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    character_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_rm_characters\"\nwhere character_id is not null\ngroup by character_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.150301Z", "completed_at": "2025-05-18T13:25:00.160419Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.160999Z", "completed_at": "2025-05-18T13:25:00.161004Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017473459243774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_rm_episode_character_episode_dlt_id__character_id.a7d124aeab", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        episode_dlt_id, character_id\n    from \"camondagster\".\"public_base\".\"base_rm_episode_character\"\n    group by episode_dlt_id, character_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.157025Z", "completed_at": "2025-05-18T13:25:00.161722Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.162719Z", "completed_at": "2025-05-18T13:25:00.162724Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006762266159057617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_rm_episodes", "compiled": true, "compiled_code": "with characters_in_episodes as (\n    \n(\n    SELECT\n        \n            episode_dlt_id\n        ,\n        COUNT(character_id) AS Num_Characters\n    FROM \"camondagster\".\"public_base\".\"base_rm_episode_character\"\n    GROUP BY\n        \n            episode_dlt_id\n        \n)\n \n)\n\nSELECT episode_id, episode_name, \nCASE\n        WHEN episode_name ILIKE '%ricklantis%' OR episode_name ILIKE '%rickmurai%' OR episode_name ILIKE '%pickle rick%' OR episode_name ILIKE '%rickternal%' THEN 'Rick-Focused'\n        WHEN episode_name ILIKE '%morty%' OR episode_name ILIKE '%mort%' THEN 'Morty-Focused'\n        WHEN episode_name ILIKE '%interdimensional cable%' OR episode_name ILIKE '%rixty minutes%' THEN 'Interdimensional Cable'\n        WHEN episode_name ILIKE '%rick%' AND episode_name ILIKE '%mort%' THEN 'Rick & Morty Duo'\n        WHEN episode_name ILIKE '%park%' OR episode_name ILIKE '%shaym%' OR episode_name ILIKE '%recall%' OR episode_name ILIKE '%galactica%' OR episode_name ILIKE '%jack%' OR episode_name ILIKE '%tomorty%' OR episode_name ILIKE '%spotless%' THEN 'Pop Culture Reference'\n        ELSE 'Other'\n    END AS episode_group,\nepisode_air_date , episode,\nCAST(SUBSTR(episode, 2, 2) AS INTEGER) AS season_num,\n    CAST(SUBSTR(episode, 5, 2) AS INTEGER) AS episode_num\n,be.episode_dlt_id\n,cie.Num_Characters\nFROM \"camondagster\".\"public_base\".\"base_rm_episodes\" as be \nleft join characters_in_episodes as cie \non be.episode_dlt_id = cie.episode_dlt_id", "relation_name": "\"camondagster\".\"public_staging\".\"staging_rm_episodes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.165451Z", "completed_at": "2025-05-18T13:25:00.173374Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.174002Z", "completed_at": "2025-05-18T13:25:00.174008Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010657310485839844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_rm_episodes_episode_id.750f703191", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect episode_id\nfrom \"camondagster\".\"public_base\".\"base_rm_episodes\"\nwhere episode_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.169661Z", "completed_at": "2025-05-18T13:25:00.174713Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.175750Z", "completed_at": "2025-05-18T13:25:00.175755Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010866641998291016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_rm_episodes_episode_id.e1123cf950", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    episode_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_rm_episodes\"\nwhere episode_id is not null\ngroup by episode_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.178493Z", "completed_at": "2025-05-18T13:25:00.186607Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.187199Z", "completed_at": "2025-05-18T13:25:00.187204Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01083517074584961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_rm_location_residents_location_dlt_id__character_id.e9a4362b6b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        location_dlt_id, character_id\n    from \"camondagster\".\"public_base\".\"base_rm_location_residents\"\n    group by location_dlt_id, character_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.183085Z", "completed_at": "2025-05-18T13:25:00.188453Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.189485Z", "completed_at": "2025-05-18T13:25:00.189490Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011555910110473633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_rm_locations", "compiled": true, "compiled_code": "with resident_per_location as (\n\t\n(\n    SELECT\n        \n            location_dlt_id\n        ,\n        COUNT(character_id) AS Num_Characters\n    FROM \"camondagster\".\"public_base\".\"base_rm_location_residents\"\n    GROUP BY\n        \n            location_dlt_id\n        \n)\n \n)\n\nSELECT bl.location_id, location_name, location_type\n,CASE\n    WHEN LOWER(location_type) IN ('planet', 'asteroid', 'quasar', 'mount', 'elemental rings', 'dwarf planet (celestial dwarf)') THEN 'Celestial Body'\n    WHEN LOWER(location_type) IN ('teenyverse', 'miniverse', 'microverse', 'diegesis', 'non-diegetic alternative reality', 'box', 'machine') THEN 'Artificial World'\n    WHEN LOWER(location_type) IN ('game', 'dream', 'memory', 'tv', 'consciousness', 'nightmare', 'fantasy town') THEN 'Virtual/Simulated'\n    WHEN LOWER(location_type) IN ('space station', 'resort', 'spa', 'base', 'police department', 'customs', 'daycare', 'spacecraft', 'arcade') THEN 'Location Type'\n    WHEN LOWER(location_type) IN ('hell', 'reality', 'liquid', 'death star', 'artificially generated world') THEN 'Abstract Realm'\n    WHEN LOWER(location_type) IN ('country', 'cluster', 'menagerie', 'convention') THEN 'Social Structure'\n    WHEN LOWER(location_type) IN ('quadrant') THEN 'Quadrant/Zone'\n    ELSE 'Unknown' END AS location_categories\n, location_dimension\n,CASE\n        WHEN location_dimension ILIKE '%unknown%' THEN 'Unclassified'\n        WHEN LOWER(location_dimension) LIKE 'dimension c%' THEN 'Standard Format'\n        WHEN location_dimension ILIKE '%Fascist%' THEN 'Fascist Variant'\n        WHEN location_dimension ILIKE '%Magic%' OR\n             location_dimension ILIKE '%Fantasy%' OR\n             location_dimension ILIKE '%Post-Apocalyptic%' OR\n             location_dimension ILIKE '%Merged%' OR\n             location_dimension ILIKE '%Evil Rick%' OR\n             location_dimension ILIKE '%Testicle%' OR\n             location_dimension ILIKE '%Eric Stoltz%' OR\n             location_dimension ILIKE '%Wasp%' OR\n             location_dimension ILIKE '%Phone%' OR\n             location_dimension ILIKE '%Spider%' OR\n             location_dimension ILIKE '%Pizza%' OR\n             location_dimension ILIKE '%Chair%' OR\n             location_dimension ILIKE '%Tusk%' OR\n             location_dimension ILIKE '%Cromulon%' THEN 'Thematic'\n        WHEN location_dimension ILIKE '%Replacement%' OR location_dimension ILIKE '%Cronenberg%' THEN 'Canonical Named'\n        ELSE 'Other' end as dimension_group\n, location_created\n,bl.location_dlt_id\n,rpl.Num_Characters\nFROM \"camondagster\".\"public_base\".\"base_rm_locations\" as bl \nleft join resident_per_location as rpl\non bl.location_dlt_id = rpl.location_dlt_id", "relation_name": "\"camondagster\".\"public_staging\".\"staging_rm_locations\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.191208Z", "completed_at": "2025-05-18T13:25:00.201776Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.202280Z", "completed_at": "2025-05-18T13:25:00.202287Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013383865356445312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_rm_locations_location_id.a55eda5e7f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"camondagster\".\"public_base\".\"base_rm_locations\"\nwhere location_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.196109Z", "completed_at": "2025-05-18T13:25:00.203639Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.204721Z", "completed_at": "2025-05-18T13:25:00.204726Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00983738899230957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_rm_locations_location_id.98f222cc59", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_rm_locations\"\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.206429Z", "completed_at": "2025-05-18T13:25:00.215705Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.216286Z", "completed_at": "2025-05-18T13:25:00.216291Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012186765670776367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_expectations_expect_column_values_to_be_between_base_weather_latitude__90___90__False.59cb5ebebd", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and latitude >= -90 and latitude <= 90\n)\n as expression\n\n\n    from \"camondagster\".\"public_base\".\"base_weather\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.211565Z", "completed_at": "2025-05-18T13:25:00.222432Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.223149Z", "completed_at": "2025-05-18T13:25:00.223155Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01277470588684082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_expectations_expect_column_values_to_be_between_base_weather_longitude__180___180__False.f01e8833c7", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and longitude >= -180 and longitude <= 180\n)\n as expression\n\n\n    from \"camondagster\".\"public_base\".\"base_weather\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.218643Z", "completed_at": "2025-05-18T13:25:00.224927Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.225912Z", "completed_at": "2025-05-18T13:25:00.225917Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008583545684814453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_weather_weather_date__city.cca068c581", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        weather_date, city\n    from \"camondagster\".\"public_base\".\"base_weather\"\n    group by weather_date, city\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.226764Z", "completed_at": "2025-05-18T13:25:00.236393Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.237116Z", "completed_at": "2025-05-18T13:25:00.237122Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012787580490112305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.relationships_base_weather_city__city__ref_base_geo_.1a216bf670", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select city as from_field\n    from \"camondagster\".\"public_base\".\"base_weather\"\n    where city is not null\n),\n\nparent as (\n    select city as to_field\n    from \"camondagster\".\"public_base\".\"base_geo\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.232735Z", "completed_at": "2025-05-18T13:25:00.242986Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.243704Z", "completed_at": "2025-05-18T13:25:00.243710Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012059450149536133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_dim_date_date_col.0abb09b4ea", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_col\nfrom \"camondagster\".\"public_common\".\"dim_date\"\nwhere date_col is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.239393Z", "completed_at": "2025-05-18T13:25:00.245619Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.246548Z", "completed_at": "2025-05-18T13:25:00.246553Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008229494094848633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_dim_date_date_col.217a54f7bd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date_col as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_common\".\"dim_date\"\nwhere date_col is not null\ngroup by date_col\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.247263Z", "completed_at": "2025-05-18T13:25:00.253536Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.256666Z", "completed_at": "2025-05-18T13:25:00.256672Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011698722839355469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_beverage_glass_type", "compiled": true, "compiled_code": "with base as (\nSELECT glass_type, glass_type_sk, dbt_valid_to,\nrow_number() over(partition by glass_type_sk order by dbt_valid_to desc) as rw_num\n    from \"camondagster\".\"public_snapshots\".\"glass_type_snapshot\"\n\t)\n\t\n\tSelect glass_type, glass_type_sk\n\tfrom base\n\twhere rw_num = 1", "relation_name": "\"camondagster\".\"public_common\".\"dim_beverage_glass_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.254032Z", "completed_at": "2025-05-18T13:25:00.258648Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.259579Z", "completed_at": "2025-05-18T13:25:00.259602Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007071018218994141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_alcoholic_type", "compiled": true, "compiled_code": "SELECT alcoholic_type, \nalcoholic_type_sk\n\tFrom \"camondagster\".\"public_staging\".\"staging_beverage_lookup\"\ngroup by alcoholic_type, alcoholic_type_sk", "relation_name": "\"camondagster\".\"public_common\".\"dim_alcoholic_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.260303Z", "completed_at": "2025-05-18T13:25:00.264687Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.268390Z", "completed_at": "2025-05-18T13:25:00.268397Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010334014892578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_beverage_type", "compiled": true, "compiled_code": "select beverage_type, alcoholic_type, beverage_category_sk, Alcoholic_Type_SK\n\tFrom \"camondagster\".\"public_staging\".\"staging_beverage_lookup\"\n\tgroup by beverage_type, alcoholic_type, beverage_category_sk, Alcoholic_Type_SK", "relation_name": "\"camondagster\".\"public_common\".\"dim_beverage_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.265162Z", "completed_at": "2025-05-18T13:25:00.273543Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.274248Z", "completed_at": "2025-05-18T13:25:00.274254Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010617256164550781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_beverage_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Staging_Beverage_Consumption\n-- Description: Fact Table data, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nselect id_drink as beverage_id, str_drink as beverage_name, \nbcl.beverage_category_sk as beverage_category_sk,\nstr_glass as glass_type,\nbcl.beverage_type_sk as beverage_type_sk,\nbcl.beverage_type as beverage_type,\nbcl.alcoholic_type_sk as alcoholic_type_sk,\nbcl.alcoholic_type as alcoholic_type,\nstr_category, \nstr_alcoholic, \nbgl.glass_type_sk,\nstr_instructions as beverage_instructions, str_drink_thumb as beverage_url, date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, \nstr_ingredient6, str_ingredient7, str_ingredient8\n\t-- from public_base.base_beverage_consumption as bc\n    from \"camondagster\".\"public_base\".\"base_beverage_consumption\" as bc\n\t-- left join public_base.base_beverage_glass_lookup as bgl\n    left join \"camondagster\".\"public_base\".\"base_beverage_glass_lookup\"  as bgl\n\ton bc.str_glass = bgl.glass_type\n\tleft join \"camondagster\".\"public_staging\".\"staging_beverage_lookup\"  as bcl\n\ton bc.id_drink = bcl.beverage_id", "relation_name": "\"camondagster\".\"public_staging\".\"staging_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.270944Z", "completed_at": "2025-05-18T13:25:00.275050Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.276270Z", "completed_at": "2025-05-18T13:25:00.276276Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006388664245605469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_city", "compiled": true, "compiled_code": "select city, latitude, longitude, region, City_SK,\nCountry_SK\nfrom \"camondagster\".\"public_staging\".\"staging_geo\"\ngroup by city, latitude, longitude, region, City_SK, Country_SK", "relation_name": "\"camondagster\".\"public_common\".\"dim_city\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.279180Z", "completed_at": "2025-05-18T13:25:00.285093Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.285701Z", "completed_at": "2025-05-18T13:25:00.285707Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00875711441040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_country", "compiled": true, "compiled_code": "select country_code, country, Country_SK\nfrom \"camondagster\".\"public_staging\".\"staging_geo\"\ngroup by country_code, country, Country_SK", "relation_name": "\"camondagster\".\"public_common\".\"dim_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.282370Z", "completed_at": "2025-05-18T13:25:00.288139Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.291295Z", "completed_at": "2025-05-18T13:25:00.291302Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012819766998291016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_meal_category", "compiled": true, "compiled_code": "SELECT category_name, country_name, meal_country_category_sk\n\tFrom \"camondagster\".\"public_staging\".\"staging_meal_category_lookup\"\ngroup by category_name, country_name, meal_country_category_sk", "relation_name": "\"camondagster\".\"public_common\".\"dim_meal_category\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.288640Z", "completed_at": "2025-05-18T13:25:00.293389Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.294367Z", "completed_at": "2025-05-18T13:25:00.294372Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007300615310668945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_meal_country", "compiled": true, "compiled_code": "SELECT country_name, meal_country_sk\n\tFrom \"camondagster\".\"public_staging\".\"staging_meal_category_lookup\"\ngroup by country_name, meal_country_sk", "relation_name": "\"camondagster\".\"public_common\".\"dim_meal_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.295088Z", "completed_at": "2025-05-18T13:25:00.305216Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.305918Z", "completed_at": "2025-05-18T13:25:00.305924Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013109445571899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_meal_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Staging_Meal_Consumption\n-- Description: Fact Table data, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT bc.meal_id as meal_id, bc.meal_name as meal_name,\nbc.category_name as category_name, bc.country_name as country_name,\n-- Dim SK\nbcl.meal_country_category_sk as meal_country_category_sk,\n\nbc.instructions as instructions, bc.meal_image_url as meal_image_url, bc.meal_youtube_url as meal_youtube_url, \nstr_ingredient1, str_ingredient2, str_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8, str_ingredient9, str_ingredient10, str_ingredient11, str_ingredient12, \nstr_ingredient13, str_ingredient14, str_ingredient15, str_ingredient16, str_ingredient17, str_ingredient18, \nstr_ingredient19, str_ingredient20, bc.meal_url as meal_url\n\t-- FROM public_base.base_beverage_consumption as bc\n    FROM \"camondagster\".\"public_base\".\"base_meal_consumption\" as bc\n\tleft join \"camondagster\".\"public_staging\".\"staging_meal_category_lookup\"  as bcl\n\ton bc.meal_id = bcl.meal_id", "relation_name": "\"camondagster\".\"public_staging\".\"staging_meal_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.301943Z", "completed_at": "2025-05-18T13:25:00.311126Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.312133Z", "completed_at": "2025-05-18T13:25:00.312138Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01134634017944336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_meal_ingredient_hierarchy", "compiled": true, "compiled_code": "SELECT sil.meal_id, sil.ingredient_name as ingredient1\n,sil2.ingredient_name as ingredient2\n,sil3.ingredient_name as ingredient3\n,sil4.ingredient_name as ingredient4\nFROM \"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil\n-- Second\nleft join \"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil2\non sil.meal_id = sil2.meal_id and sil.ingredient_id != sil2.ingredient_id\n-- third\nleft join \"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil3\non sil.meal_id = sil3.meal_id and sil3.ingredient_id not in (sil2.ingredient_id, sil.ingredient_id)\n-- Fourth\nleft join \"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil4\non sil.meal_id = sil4.meal_id and sil4.ingredient_id not in (sil3.ingredient_id, sil2.ingredient_id, sil.ingredient_id)", "relation_name": "\"camondagster\".\"public_common\".\"dim_meal_ingredient_hierarchy\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.308248Z", "completed_at": "2025-05-18T13:25:00.311680Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.312875Z", "completed_at": "2025-05-18T13:25:00.312880Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005738496780395508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_meal_ingredient_jointable", "compiled": true, "compiled_code": "SELECT distinct meal_id\n    from \"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" \n    where meal_id is not null", "relation_name": "\"camondagster\".\"public_common\".\"dim_meal_ingredient_jointable\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.316604Z", "completed_at": "2025-05-18T13:25:00.323319Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.323988Z", "completed_at": "2025-05-18T13:25:00.323994Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009457826614379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.fact_beverage_consumption", "compiled": true, "compiled_code": "SELECT beverage_id, beverage_name, glass_type_sk, Beverage_Category_SK,Beverage_Type_SK, \nAlcoholic_Type_SK, Beverage_Type, Alcoholic_type,\nbeverage_instructions, beverage_url, Glass_Type, date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, \nstr_ingredient6, str_ingredient7, str_ingredient8\n    From \"camondagster\".\"public_staging\".\"staging_beverage_consumption\"", "relation_name": "\"camondagster\".\"public_common\".\"fact_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.319285Z", "completed_at": "2025-05-18T13:25:00.324755Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.325800Z", "completed_at": "2025-05-18T13:25:00.325806Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010724306106567383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_dim_city_city_sk.ab81b8c4f2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city_sk\nfrom \"camondagster\".\"public_common\".\"dim_city\"\nwhere city_sk is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.328704Z", "completed_at": "2025-05-18T13:25:00.336683Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.337305Z", "completed_at": "2025-05-18T13:25:00.337312Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010887861251831055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_dim_city_city_sk.c481aa01d2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    city_sk as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_common\".\"dim_city\"\nwhere city_sk is not null\ngroup by city_sk\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.332817Z", "completed_at": "2025-05-18T13:25:00.339139Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.340130Z", "completed_at": "2025-05-18T13:25:00.340136Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012024402618408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_dim_country_country_sk.86f12ec03d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_sk\nfrom \"camondagster\".\"public_common\".\"dim_country\"\nwhere country_sk is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.340856Z", "completed_at": "2025-05-18T13:25:00.350894Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.351554Z", "completed_at": "2025-05-18T13:25:00.351559Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013006448745727539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_dim_country_country_sk.76e889bc85", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    country_sk as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_common\".\"dim_country\"\nwhere country_sk is not null\ngroup by country_sk\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-18T13:25:00.346183Z", "completed_at": "2025-05-18T13:25:00.352376Z"}, {"name": "execute", "started_at": "2025-05-18T13:25:00.352867Z", "completed_at": "2025-05-18T13:25:00.352871Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007740020751953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.fact_meal_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Fact_Meal_Consumption\n-- Description: Fact Table, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT meal_id, meal_name,\ncategory_name, country_name,\nmeal_country_category_sk,\ninstructions, meal_image_url, meal_youtube_url, \nstr_ingredient1, str_ingredient2, str_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8, str_ingredient9, str_ingredient10, str_ingredient11, str_ingredient12, \nstr_ingredient13, str_ingredient14, str_ingredient15, str_ingredient16, str_ingredient17, str_ingredient18, \nstr_ingredient19, str_ingredient20, meal_url\nFROM \"camondagster\".\"public_staging\".\"staging_meal_consumption\"", "relation_name": "\"camondagster\".\"public_common\".\"fact_meal_consumption\"", "batch_results": null}], "elapsed_time": 3.0696325302124023, "args": {"empty_catalog": false, "use_colors_file": true, "skip_nodes_if_on_run_start_fails": false, "write_json": true, "require_yaml_configuration_for_mf_time_spines": false, "cache_selected_only": false, "printer_width": 80, "source_freshness_run_project_hooks": false, "macro_debugging": false, "log_level": "info", "introspect": true, "version_check": true, "favor_state": false, "warn_error_options": {"include": [], "exclude": []}, "require_nested_cumulative_type_params": false, "state_modified_compare_vars": false, "static": false, "defer": false, "require_explicit_package_overrides_for_builtin_materializations": true, "log_path": "/home/runner/work/CamOnDagsterDbt/CamOnDagsterDbt/dbt/logs", "log_format": "default", "select": [], "quiet": false, "log_file_max_bytes": 10485760, "project_dir": "/home/runner/work/CamOnDagsterDbt/CamOnDagsterDbt/dbt", "print": true, "which": "generate", "use_colors": true, "log_level_file": "debug", "partial_parse": true, "vars": {}, "populate_cache": true, "send_anonymous_usage_stats": true, "require_resource_names_without_spaces": false, "state_modified_compare_more_unrendered_values": false, "invocation_command": "dbt docs generate", "compile": true, "exclude": [], "log_format_file": "debug", "profiles_dir": "/home/runner/.dbt", "indirect_selection": "eager", "require_batched_execution_for_custom_microbatch_strategy": false, "show_resource_report": false, "static_parser": true, "strict_mode": false, "partial_parse_file_diff": true}}