{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-05-19T01:42:25.902419Z", "invocation_id": "b0812251-cdae-4f70-be0d-d352f084902c", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.163267Z", "completed_at": "2025-05-19T01:42:25.166530Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.167058Z", "completed_at": "2025-05-19T01:42:25.167070Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013047933578491211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_beverage_ingredients_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_beverage_ingredients_lookup\n-- Description: Base Table for Beverage Ingredients\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- 2025-05-12 | Cam      | Added logic to filter out null beverage IDs\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nSelect it.source_ingredient as Ingredient,\nit.id_drink as beverage_id,\nit.str_drink as Beverage_Name\nfrom \"camondagster\".\"beverage_data\".\"ingredients_table\"  as it\nwhere it.id_drink is not null", "relation_name": "\"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.155607Z", "completed_at": "2025-05-19T01:42:25.173559Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.174683Z", "completed_at": "2025-05-19T01:42:25.174690Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021271944046020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_beverage_consumption", "compiled": true, "compiled_code": "SELECT id_drink, str_drink, str_category, str_alcoholic, str_glass, str_instructions, \nstr_drink_thumb, (date_modified AT TIME ZONE 'Australia/Melbourne')::date AS date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8\n\t-- FROM cocktail_data.consumption\n    from \"camondagster\".\"beverage_data\".\"consumption\"", "relation_name": "\"camondagster\".\"public_base\".\"base_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.169513Z", "completed_at": "2025-05-19T01:42:25.174219Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.175460Z", "completed_at": "2025-05-19T01:42:25.175467Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007132768630981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_beverages", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Beverages\n-- Description: Base Table for multiple Dims - Bev Type, Alcoholic Type and Beverage Name\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nselect bt.str_drink as beverage_name, \n    bt.id_drink as beverage_id, \n\tbt.source_beverage_type as beverage_type,\n\tmd5(cast(coalesce(cast(source_beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_alcohol_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_category_sk,\n\tact.source_alcohol_type as alcoholic_type\n\tfrom \"camondagster\".\"beverage_data\".\"beverages_table\" as bt\n    left join \"camondagster\".\"beverage_data\".\"alcoholic_table\" as act \n\ton bt.id_drink = act.id_drink", "relation_name": "\"camondagster\".\"public_base\".\"base_beverages\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.179506Z", "completed_at": "2025-05-19T01:42:25.185551Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.186503Z", "completed_at": "2025-05-19T01:42:25.186511Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009245634078979492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_geo", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Geo\n-- Description: Base Table for multiple Dims - City, Country, Region and Continent\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-15 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nSELECT city_id, city, latitude, longitude, country_code, country, region, continent\nFrom \"camondagster\".\"geo_data\".\"geo_cities\" \nwhere country in ('New Zealand', 'United Kingdom', 'Australia', 'Canada')", "relation_name": "\"camondagster\".\"public_base\".\"base_geo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.182335Z", "completed_at": "2025-05-19T01:42:25.186024Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.187230Z", "completed_at": "2025-05-19T01:42:25.187236Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009260177612304688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_gsheets_finance", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base Gsheets Finance\n-- Description: Base Table for Gsheets Finance\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-14 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nSELECT \n    Id, \n    stock, \n    CAST(price AS DECIMAL) AS price,\n    date_time AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS date_time,\n    ROUND((MAX(price) OVER(PARTITION BY stock) - MIN(price) OVER(PARTITION BY stock)), 2) AS price_spread,\n    ROUND((LAST(price) OVER(PARTITION BY stock ORDER BY date_time) - FIRST(price) OVER(PARTITION BY stock)), 2) AS relative_price_movement,\n    ROUND((LAST(price) OVER(PARTITION BY stock) - FIRST(price) OVER(PARTITION BY stock)), 2) AS abs_price_movement,\n    COUNT(id) OVER(PARTITION BY stock) AS Num_Stock_Entries\nFROM \"camondagster\".\"google_sheets_data\".\"gsheets_finance\"", "relation_name": "\"camondagster\".\"public_base\".\"base_gsheets_finance\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.191389Z", "completed_at": "2025-05-19T01:42:25.199676Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.200339Z", "completed_at": "2025-05-19T01:42:25.200345Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011152267456054688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_meal_category_country", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_meal_category_country\n-- Description: Base Table for multiple Dims - meal category, meal country\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT ct.str_meal as meal_name, ct.id_meal as meal_id, \n\tct.source_country as country_name,\n\tmd5(cast(coalesce(cast(source_country as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_category as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as meal_country_category_sk,\n\tcat.source_category as category_name\nFROM \"camondagster\".\"meals_data\".\"country_table\" as ct\n\tleft join \"camondagster\".\"meals_data\".\"category_table\" as cat \n\ton ct.id_meal = cat.id_meal", "relation_name": "\"camondagster\".\"public_base\".\"base_meal_category_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.196640Z", "completed_at": "2025-05-19T01:42:25.205711Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.206378Z", "completed_at": "2025-05-19T01:42:25.206388Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016626834869384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_meal_consumption", "compiled": true, "compiled_code": "select id_meal as meal_id, str_meal as meal_name, str_category as category_name, str_area as country_name, \nstr_instructions as instructions, str_meal_thumb as meal_image_url, str_youtube as meal_youtube_url, \nNULLIF(str_ingredient1, '') as str_ingredient1, \nNULLIF(str_ingredient2, '') as str_ingredient2,\nNULLIF(str_ingredient3, '') as str_ingredient3,\nNULLIF(str_ingredient4, '') as str_ingredient4,\nNULLIF(str_ingredient5, '') as str_ingredient5,\nNULLIF(str_ingredient6, '') as str_ingredient6,\nNULLIF(str_ingredient7, '') as str_ingredient7, \nNULLIF(str_ingredient8, '') as str_ingredient8,\nNULLIF(str_ingredient9, '') as str_ingredient9,\nNULLIF(str_ingredient10, '') as str_ingredient10,\nNULLIF(str_ingredient11, '') as str_ingredient11,\nNULLIF(str_ingredient12, '') as str_ingredient12,\nNULLIF(str_ingredient13, '') as str_ingredient13,\nNULLIF(str_ingredient14, '') as str_ingredient14,\nNULLIF(str_ingredient15, '') as str_ingredient15,\nNULLIF(str_ingredient16, '') as str_ingredient16,\nNULLIF(str_ingredient17, '') as str_ingredient17,\nNULLIF(str_ingredient18, '') as str_ingredient18,\nNULLIF(str_ingredient19, '') as str_ingredient19,\nNULLIF(str_ingredient20, '') as str_ingredient20,\nstr_source as meal_url\n    from \"camondagster\".\"meals_data\".\"consumption\"", "relation_name": "\"camondagster\".\"public_base\".\"base_meal_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.202621Z", "completed_at": "2025-05-19T01:42:25.208234Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.209239Z", "completed_at": "2025-05-19T01:42:25.209246Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007754087448120117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_meal_ingredient_table", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_meal_ingredient_table\n-- Description: Base Table for list of meals for each ingredient\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT str_meal as meal_name, id_meal as meal_id, \nsource_ingredient as ingredient_name\nFROM \"camondagster\".\"meals_data\".\"ingredient_table\"", "relation_name": "\"camondagster\".\"public_base\".\"base_meal_ingredient_table\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.210049Z", "completed_at": "2025-05-19T01:42:25.218464Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.219538Z", "completed_at": "2025-05-19T01:42:25.219544Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011938095092773438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_meal_ingredients", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_meal_ingredients\n-- Description: Base Table for meal ingredients - Only Needed for Ingredient ID (Int)\n-- Fast Comparison\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT id_ingredient::INTEGER as ingredient_id, str_ingredient as ingredient_name\nFROM \"camondagster\".\"meals_data\".\"ingredients\"", "relation_name": "\"camondagster\".\"public_base\".\"base_meal_ingredients\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.214605Z", "completed_at": "2025-05-19T01:42:25.219088Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.220262Z", "completed_at": "2025-05-19T01:42:25.220267Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006735086441040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_openlibrary", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Beverage_openlibrary\n-- Description: Unioning Tables with Books seperated by Search and Filter term\n-- from the OpenLibrary API, the point of this is to test using both DLT State\n-- & DuckDb connection to check for New API data (via DLT State) and deleted or\n-- truncation data loss with DuckDB sql comparison with DLT State.\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-15 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"sql_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"python_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"data_warehousing_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"data_engineering_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"apache_airflow_books\"", "relation_name": "\"camondagster\".\"public_base\".\"base_openlibrary\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.224298Z", "completed_at": "2025-05-19T01:42:25.230229Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.230788Z", "completed_at": "2025-05-19T01:42:25.230794Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00872182846069336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_character_episode", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_character_episode\n-- Description: Base join table\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT\n  _dlt_root_id AS character_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS episode_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"character__episode\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_character_episode\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.227054Z", "completed_at": "2025-05-19T01:42:25.233222Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.237884Z", "completed_at": "2025-05-19T01:42:25.237892Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015256881713867188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_characters", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_characters\n-- Description: Base Table for ricky and morty characters from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nSELECT id as character_id, name as character_name, status as character_status, \nspecies as character_species, gender as character_gender, \norigin__name as character_origin, \nlocation__name as character_first_location, location__url as character_first_location_url, \nimage as character_image, url as character_url, \ncreated AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS character_created\n, \"_dlt_id\" as character_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"character\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_characters\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.233668Z", "completed_at": "2025-05-19T01:42:25.243305Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.243892Z", "completed_at": "2025-05-19T01:42:25.243899Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011861324310302734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_episode_character", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_episode_character\n-- Description: Base join table\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT\n  _dlt_root_id AS episode_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS character_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"episode__characters\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_episode_character\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.240441Z", "completed_at": "2025-05-19T01:42:25.249113Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.249613Z", "completed_at": "2025-05-19T01:42:25.249619Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010291576385498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_episodes", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_rm_episode\n-- Description: Base Table for ricky and morty episodes from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nSELECT id as episode_id, name as episode_name\n,STRPTIME(air_date, '%B %d, %Y') AS episode_air_date\n, episode, url as episode_url\n,created AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS episode_created \n,\"_dlt_id\" as episode_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"episode\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_episodes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.246416Z", "completed_at": "2025-05-19T01:42:25.251469Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.252527Z", "completed_at": "2025-05-19T01:42:25.252534Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007365226745605469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_location_residents", "compiled": true, "compiled_code": "SELECT\n  _dlt_root_id AS location_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS character_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"location__residents\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_location_residents\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.253276Z", "completed_at": "2025-05-19T01:42:25.260516Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.261215Z", "completed_at": "2025-05-19T01:42:25.261222Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010339021682739258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_locations", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_rm_locations\n-- Description: Base Table for ricky and morty locations from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT id as location_id, name as location_name, type as location_type, \ndimension as location_dimension, url as location_url\n,created AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS location_created\n,\"_dlt_id\" as location_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"location\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_locations\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.257844Z", "completed_at": "2025-05-19T01:42:25.263553Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.266780Z", "completed_at": "2025-05-19T01:42:25.266787Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010030269622802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_weather", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_weather\n-- Description: Base Table for weather data from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-18 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT (date)::date as weather_date, city, temperature_max, temperature_min, temperature_mean, precipitation_sum, \nwindspeed_max, windgusts_max, sunshine_duration, location__lat as latitude, location__lng as longitude\nFROM \"camondagster\".\"weather_data\".\"daily_weather\"", "relation_name": "\"camondagster\".\"public_base\".\"base_weather\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.264046Z", "completed_at": "2025-05-19T01:42:25.271755Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.272702Z", "completed_at": "2025-05-19T01:42:25.272707Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010352611541748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_beverage_ingredient_jointable", "compiled": true, "compiled_code": "SELECT distinct id_drink as Beverage_ID\n    from \"camondagster\".\"beverage_data\".\"ingredients_table\" as it\n    where id_drink is not null", "relation_name": "\"camondagster\".\"public_common\".\"dim_beverage_ingredient_jointable\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.269450Z", "completed_at": "2025-05-19T01:42:25.272236Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.273437Z", "completed_at": "2025-05-19T01:42:25.273442Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005125761032104492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_date", "compiled": true, "compiled_code": "WITH RECURSIVE date_series AS (\n    SELECT DATE '2000-01-01' AS date\n    UNION ALL\n    SELECT date + INTERVAL '1 day'\n    FROM date_series\n    WHERE date + INTERVAL '1 day' < DATE '2030-01-01'\n)\nSELECT\n    date AS date_col,\n    EXTRACT(YEAR FROM date) AS year,\n    EXTRACT(MONTH FROM date) AS month,\n    EXTRACT(DAY FROM date) AS day,\n    strftime('%B', date) AS month_name,  -- Replacing TO_CHAR with strftime\n    strftime('%A', date) AS weekday_name,  -- Replacing TO_CHAR with strftime\n    EXTRACT(DOW FROM date) AS day_of_week,\n    CASE WHEN EXTRACT(DOW FROM date) IN (0, 6) THEN TRUE ELSE FALSE END AS is_weekend,\n    EXTRACT(DOY FROM date) AS day_of_year,\n    EXTRACT(WEEK FROM date) AS week_of_year,\n    EXTRACT(QUARTER FROM date) AS quarter\nFROM date_series", "relation_name": "\"camondagster\".\"public_common\".\"dim_date\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.277367Z", "completed_at": "2025-05-19T01:42:25.280987Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.291089Z", "completed_at": "2025-05-19T01:42:25.291096Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015938520431518555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.camondagster.glass_type_snapshot", "compiled": true, "compiled_code": "\n\n\n\nSELECT \n    id_drink as beverage_id, source_glass as glass_type\n    ,md5(cast(coalesce(cast(glass_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as Glass_Type_SK\nfrom \"camondagster\".\"beverage_data\".\"glass_table\"\n", "relation_name": "\"camondagster\".\"public_snapshots\".\"glass_type_snapshot\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.293688Z", "completed_at": "2025-05-19T01:42:25.297676Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.298173Z", "completed_at": "2025-05-19T01:42:25.298178Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005673646926879883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_openlibrary_apache_airflow_books_key.013e7c07bb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"openlibrary_data\".\"apache_airflow_books\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.281497Z", "completed_at": "2025-05-19T01:42:25.299903Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.300888Z", "completed_at": "2025-05-19T01:42:25.300893Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.025105714797973633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_gsheets_gsheets_finance_id.3104f01e33", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"camondagster\".\"google_sheets_data\".\"gsheets_finance\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.301621Z", "completed_at": "2025-05-19T01:42:25.310952Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.311569Z", "completed_at": "2025-05-19T01:42:25.311574Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012224435806274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_openlibrary_data_engineering_books_key.066b4bba14", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"openlibrary_data\".\"data_engineering_books\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.307136Z", "completed_at": "2025-05-19T01:42:25.313795Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.318179Z", "completed_at": "2025-05-19T01:42:25.318185Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012209177017211914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_openlibrary_data_warehousing_books_key.8ca1507d40", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"openlibrary_data\".\"data_warehousing_books\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.314318Z", "completed_at": "2025-05-19T01:42:25.324543Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.325207Z", "completed_at": "2025-05-19T01:42:25.325213Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012512922286987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_openlibrary_python_books_key.2e25c37883", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"openlibrary_data\".\"python_books\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.320675Z", "completed_at": "2025-05-19T01:42:25.326006Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.327018Z", "completed_at": "2025-05-19T01:42:25.327023Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007532596588134766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_openlibrary_sql_books_key.7dea3fa6c0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"openlibrary_data\".\"sql_books\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.329769Z", "completed_at": "2025-05-19T01:42:25.341489Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.342161Z", "completed_at": "2025-05-19T01:42:25.342168Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014554262161254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_gsheets_gsheets_finance_id.edff15d707", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"google_sheets_data\".\"gsheets_finance\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.336207Z", "completed_at": "2025-05-19T01:42:25.344422Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.348526Z", "completed_at": "2025-05-19T01:42:25.348533Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01933741569519043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_openlibrary_apache_airflow_books_key.e5a73d623a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"openlibrary_data\".\"apache_airflow_books\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.344901Z", "completed_at": "2025-05-19T01:42:25.350960Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.355157Z", "completed_at": "2025-05-19T01:42:25.355164Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01178598403930664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_openlibrary_data_engineering_books_key.a0d050f7e4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"openlibrary_data\".\"data_engineering_books\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.351456Z", "completed_at": "2025-05-19T01:42:25.357132Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.358084Z", "completed_at": "2025-05-19T01:42:25.358090Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008313894271850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_openlibrary_data_warehousing_books_key.3496bcbb08", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"openlibrary_data\".\"data_warehousing_books\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.358792Z", "completed_at": "2025-05-19T01:42:25.364268Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.368530Z", "completed_at": "2025-05-19T01:42:25.368537Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012026548385620117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_openlibrary_python_books_key.00e67edb2f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"openlibrary_data\".\"python_books\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.364874Z", "completed_at": "2025-05-19T01:42:25.370609Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.371581Z", "completed_at": "2025-05-19T01:42:25.371586Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008436203002929688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_openlibrary_sql_books_key.780888e7a3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"openlibrary_data\".\"sql_books\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.372318Z", "completed_at": "2025-05-19T01:42:25.378351Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.382699Z", "completed_at": "2025-05-19T01:42:25.382705Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012662649154663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_beverage_ingredient_hierarchy", "compiled": true, "compiled_code": "SELECT bil.ingredient, bil.beverage_id, bil.beverage_name\n\t,bil2.ingredient as ingredient2\n\t,bil3.ingredient as ingredient3\n\t,bil4.ingredient as ingredient4\n\t,bil5.ingredient as ingredient5\n\t,bil6.ingredient as ingredient6\n\t,bil7.ingredient as ingredient7\n\t-- FROM public_base.base_beverage_ingredients_lookup as bil\n    from \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil\n\t-- Second\n\t-- left join public_base.base_beverage_ingredients_lookup as bil2 \n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil2\n\ton bil.beverage_id = bil2.beverage_id and bil.ingredient != bil2.ingredient\n\t-- Third\n\t-- left join public_base.base_beverage_ingredients_lookup as bil3\n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil3\n\ton bil.beverage_id = bil3.beverage_id and bil3.ingredient not in (bil2.ingredient, bil.ingredient)\n\t-- Fourth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil4\n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil4\n\ton bil.beverage_id = bil4.beverage_id and bil4.ingredient not in (bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- Fifth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil5\n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil5\n\ton bil.beverage_id = bil5.beverage_id and bil5.ingredient not in (bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- sixth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil6\n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil6\n\ton bil.beverage_id = bil6.beverage_id and bil6.ingredient not in (bil5.ingredient, bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- seventh\n\t-- left join public_base.base_beverage_ingredients_lookup as bil7\n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil7\n\ton bil.beverage_id = bil7.beverage_id and bil7.ingredient not in (bil6.ingredient, bil5.ingredient, bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n-- \twhere bil.beverage_id = '17836'\n\torder by ingredient desc, beverage_name desc, ingredient2 desc", "relation_name": "\"camondagster\".\"public_common\".\"dim_beverage_ingredient_hierarchy\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.378818Z", "completed_at": "2025-05-19T01:42:25.390425Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.391117Z", "completed_at": "2025-05-19T01:42:25.391124Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013914346694946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_beverage_ingredients_lookup_ingredient__beverage_id.b326d9a641", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ingredient, beverage_id\n    from \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\"\n    group by ingredient, beverage_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.385218Z", "completed_at": "2025-05-19T01:42:25.393035Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.393966Z", "completed_at": "2025-05-19T01:42:25.393985Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009809255599975586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_beverage_consumption_id_drink.561caf7667", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_drink\nfrom \"camondagster\".\"public_base\".\"base_beverage_consumption\"\nwhere id_drink is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.394686Z", "completed_at": "2025-05-19T01:42:25.470499Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.471134Z", "completed_at": "2025-05-19T01:42:25.471140Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.07870221138000488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_beverage_lookup", "compiled": true, "compiled_code": "select beverage_name, \n\t-- used in dim_beverage to connect to consumption\n    beverage_id, \n\tbeverage_type,\n\t-- used in dim_beverage and dim_beverage_type as the connection\n\tmd5(cast(coalesce(cast(beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_type_sk,\n\t-- used in dim_alcoholic_type and dim_beverage_type as connection\n\tmd5(cast(coalesce(cast(beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(alcoholic_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_category_sk,\n\talcoholic_type,\n\t-- in dim_alcoholic_type encase any future fact tables need to connect directly \n\tmd5(cast(coalesce(cast(alcoholic_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as alcoholic_type_sk\n    from \"camondagster\".\"public_base\".\"base_beverages\"", "relation_name": "\"camondagster\".\"public_staging\".\"staging_beverage_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.473708Z", "completed_at": "2025-05-19T01:42:25.477668Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.478777Z", "completed_at": "2025-05-19T01:42:25.478784Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006310939788818359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_beverages_beverage_id.b8f3d5637e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect beverage_id\nfrom \"camondagster\".\"public_base\".\"base_beverages\"\nwhere beverage_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.466193Z", "completed_at": "2025-05-19T01:42:25.478204Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.479533Z", "completed_at": "2025-05-19T01:42:25.479538Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014467954635620117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.accepted_values_base_beverages_alcoholic_type__True__Non_alcoholic__Optional_alcohol__Alcoholic.34c9662782", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        alcoholic_type as value_field,\n        count(*) as n_records\n\n    from \"camondagster\".\"public_base\".\"base_beverages\"\n    group by alcoholic_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Non alcoholic','Optional alcohol','Alcoholic'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.483339Z", "completed_at": "2025-05-19T01:42:25.491858Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.492991Z", "completed_at": "2025-05-19T01:42:25.492997Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011712074279785156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_beverages_beverage_name.4ae5d66d1b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect beverage_name\nfrom \"camondagster\".\"public_base\".\"base_beverages\"\nwhere beverage_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.487136Z", "completed_at": "2025-05-19T01:42:25.492510Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.493713Z", "completed_at": "2025-05-19T01:42:25.493718Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011931419372558594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.relationships_base_beverage_consumption_id_drink__beverage_id__ref_base_beverages_.e5e651a6ba", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select id_drink as from_field\n    from \"camondagster\".\"public_base\".\"base_beverage_consumption\"\n    where id_drink is not null\n),\n\nparent as (\n    select beverage_id as to_field\n    from \"camondagster\".\"public_base\".\"base_beverages\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.501193Z", "completed_at": "2025-05-19T01:42:25.506685Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.507192Z", "completed_at": "2025-05-19T01:42:25.507198Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011235952377319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_beverages_beverage_name.a2d4fd1356", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    beverage_name as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_beverages\"\nwhere beverage_name is not null\ngroup by beverage_name\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.497510Z", "completed_at": "2025-05-19T01:42:25.508386Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.509414Z", "completed_at": "2025-05-19T01:42:25.509419Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013977527618408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_beverages_beverage_id.fca0ee3980", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    beverage_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_beverages\"\nwhere beverage_id is not null\ngroup by beverage_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.511163Z", "completed_at": "2025-05-19T01:42:25.519928Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.520644Z", "completed_at": "2025-05-19T01:42:25.520650Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011856794357299805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_geo", "compiled": true, "compiled_code": "select city_id, city, latitude, longitude, country_code, country, region, \nmd5(cast(coalesce(cast(city as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as City_SK,\nmd5(cast(coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as Country_SK\nfrom \"camondagster\".\"public_base\".\"base_geo\"", "relation_name": "\"camondagster\".\"public_staging\".\"staging_geo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.516386Z", "completed_at": "2025-05-19T01:42:25.527361Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.528041Z", "completed_at": "2025-05-19T01:42:25.528048Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01295614242553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.accepted_values_base_geo_country_code__True__AU__NZ__CA__GB.a3d3afa24f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        country_code as value_field,\n        count(*) as n_records\n\n    from \"camondagster\".\"public_base\".\"base_geo\"\n    group by country_code\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'AU','NZ','CA','GB'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.523121Z", "completed_at": "2025-05-19T01:42:25.529959Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.530946Z", "completed_at": "2025-05-19T01:42:25.530951Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009062767028808594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_expectations_expect_column_values_to_be_between_base_geo_latitude__90___90__False.c3084ce8f0", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and latitude >= -90 and latitude <= 90\n)\n as expression\n\n\n    from \"camondagster\".\"public_base\".\"base_geo\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.531685Z", "completed_at": "2025-05-19T01:42:25.537170Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.538130Z", "completed_at": "2025-05-19T01:42:25.538136Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00873422622680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_expectations_expect_column_values_to_be_between_base_geo_longitude__180___180__False.5d5a8f0a6a", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and longitude >= -180 and longitude <= 180\n)\n as expression\n\n\n    from \"camondagster\".\"public_base\".\"base_geo\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.538847Z", "completed_at": "2025-05-19T01:42:25.544178Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.548300Z", "completed_at": "2025-05-19T01:42:25.548306Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011852264404296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_geo_city_id.94562eb347", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city_id\nfrom \"camondagster\".\"public_base\".\"base_geo\"\nwhere city_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.544652Z", "completed_at": "2025-05-19T01:42:25.555743Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.556702Z", "completed_at": "2025-05-19T01:42:25.556707Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01359868049621582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_geo_city_id.a4c893fe58", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    city_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_geo\"\nwhere city_id is not null\ngroup by city_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.550599Z", "completed_at": "2025-05-19T01:42:25.562715Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.563424Z", "completed_at": "2025-05-19T01:42:25.563431Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01393270492553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_gsheets_finance_id.0d75c08608", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"camondagster\".\"public_base\".\"base_gsheets_finance\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.559219Z", "completed_at": "2025-05-19T01:42:25.569208Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.569896Z", "completed_at": "2025-05-19T01:42:25.569902Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011884212493896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_gsheets_finance_id.81717edef5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_gsheets_finance\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.565773Z", "completed_at": "2025-05-19T01:42:25.570654Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.571689Z", "completed_at": "2025-05-19T01:42:25.571694Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007028818130493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_meal_category_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: staging_meal_category_lookup\n-- Description: Staging Table, lookup for category and country per meal, used for Dim\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT \n\tmeal_name, \n\tmeal_id, category_name,  \n\t-- Used in Dim_Meal_Category and Dim_Meal_Country\n\tmeal_country_category_sk,\n\tcountry_name,\n\t-- In Dim_Meal_Country encase any future fact tables need to connect directly \n\tmd5(cast(coalesce(cast(country_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as meal_country_sk\n    From \"camondagster\".\"public_base\".\"base_meal_category_country\"", "relation_name": "\"camondagster\".\"public_staging\".\"staging_meal_category_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.574658Z", "completed_at": "2025-05-19T01:42:25.582587Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.583635Z", "completed_at": "2025-05-19T01:42:25.583640Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011292695999145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_meal_category_country_meal_id.f1fc6a2e02", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect meal_id\nfrom \"camondagster\".\"public_base\".\"base_meal_category_country\"\nwhere meal_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.578990Z", "completed_at": "2025-05-19T01:42:25.583160Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.584386Z", "completed_at": "2025-05-19T01:42:25.584391Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010311365127563477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_meal_category_country_meal_id.96de22ba03", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    meal_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_meal_category_country\"\nwhere meal_id is not null\ngroup by meal_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.591845Z", "completed_at": "2025-05-19T01:42:25.596809Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.597814Z", "completed_at": "2025-05-19T01:42:25.597820Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011220455169677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.relationships_base_meal_consumption_meal_id__meal_id__ref_base_meal_category_country_.ebae62c8a2", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select meal_id as from_field\n    from \"camondagster\".\"public_base\".\"base_meal_consumption\"\n    where meal_id is not null\n),\n\nparent as (\n    select meal_id as to_field\n    from \"camondagster\".\"public_base\".\"base_meal_category_country\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.588177Z", "completed_at": "2025-05-19T01:42:25.597317Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.598608Z", "completed_at": "2025-05-19T01:42:25.598613Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01250767707824707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_meal_consumption_meal_id.5801469d88", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect meal_id\nfrom \"camondagster\".\"public_base\".\"base_meal_consumption\"\nwhere meal_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.606628Z", "completed_at": "2025-05-19T01:42:25.611910Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.612892Z", "completed_at": "2025-05-19T01:42:25.612897Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011987924575805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_meal_ingredients_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: staging_meal_ingredients_lookup\n-- Description: Staging Table, lookup for Ingredients for each meal, used for Dim\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT mit.meal_name, mit.meal_id, mit.ingredient_name, mi.ingredient_id\n\tFROM \"camondagster\".\"public_base\".\"base_meal_ingredient_table\" as mit \n\tleft join \"camondagster\".\"public_base\".\"base_meal_ingredients\" as mi \n\ton mit.ingredient_name = mi.ingredient_name", "relation_name": "\"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.602684Z", "completed_at": "2025-05-19T01:42:25.612403Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.613687Z", "completed_at": "2025-05-19T01:42:25.613692Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013292789459228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_meal_ingredient_table_ingredient_name__meal_id.319098ed2d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ingredient_name, meal_id\n    from \"camondagster\".\"public_base\".\"base_meal_ingredient_table\"\n    group by ingredient_name, meal_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.621358Z", "completed_at": "2025-05-19T01:42:25.625333Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.625844Z", "completed_at": "2025-05-19T01:42:25.625849Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009690046310424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_meal_ingredients_ingredient_id.a78af5b0c2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ingredient_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_meal_ingredients\"\nwhere ingredient_id is not null\ngroup by ingredient_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.617725Z", "completed_at": "2025-05-19T01:42:25.627061Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.628109Z", "completed_at": "2025-05-19T01:42:25.628114Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012599945068359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_meal_ingredients_ingredient_id.0a9dcc549e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingredient_id\nfrom \"camondagster\".\"public_base\".\"base_meal_ingredients\"\nwhere ingredient_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.634712Z", "completed_at": "2025-05-19T01:42:25.638345Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.639703Z", "completed_at": "2025-05-19T01:42:25.639709Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006170749664306641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_openlibrary_key.c2996aab1f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_openlibrary\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.629813Z", "completed_at": "2025-05-19T01:42:25.638997Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.640470Z", "completed_at": "2025-05-19T01:42:25.640476Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012987852096557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_openlibrary_key.4f2c5727d5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"public_base\".\"base_openlibrary\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.648346Z", "completed_at": "2025-05-19T01:42:25.651906Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.652410Z", "completed_at": "2025-05-19T01:42:25.652415Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009682178497314453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_rm_characters", "compiled": true, "compiled_code": "with episodes_per_character as (\n  \n(\n    SELECT\n        \n            character_dlt_id\n        ,\n        COUNT(episode_id) AS Num_Episodes\n    FROM \"camondagster\".\"public_base\".\"base_rm_character_episode\"\n    GROUP BY\n        \n            character_dlt_id\n        \n)\n \n)\n\nSELECT bc.character_id, character_name, \nCASE\n    WHEN regexp_matches(character_name, '^Rick\\b', 'i') THEN 'Rick'\n    WHEN regexp_matches(character_name, '^Morty\\b', 'i') THEN 'Morty'\n    WHEN regexp_matches(character_name, '^Summer\\b', 'i') THEN 'Summer'\n    WHEN regexp_matches(character_name, '^Beth\\b', 'i') THEN 'Beth'\n    WHEN regexp_matches(character_name, '^Jerry\\b', 'i') THEN 'Jerry'\n    ELSE 'Other'\n  END AS character_group,\ncharacter_status, character_species, \ncharacter_gender, character_origin,\ncharacter_image, character_created, bc.character_dlt_id, epc.Num_Episodes\nFROM \"camondagster\".\"public_base\".\"base_rm_characters\" as bc \nleft join episodes_per_character as epc\non bc.character_dlt_id = epc.character_dlt_id\norder by bc.character_id", "relation_name": "\"camondagster\".\"public_staging\".\"staging_rm_characters\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.644273Z", "completed_at": "2025-05-19T01:42:25.660380Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.660989Z", "completed_at": "2025-05-19T01:42:25.660996Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01876664161682129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_rm_character_episode_character_dlt_id__episode_id.54e2562ff2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        character_dlt_id, episode_id\n    from \"camondagster\".\"public_base\".\"base_rm_character_episode\"\n    group by character_dlt_id, episode_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.654677Z", "completed_at": "2025-05-19T01:42:25.662930Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.663952Z", "completed_at": "2025-05-19T01:42:25.663958Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010388851165771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.accepted_values_base_rm_characters_character_gender__True__Genderless__Male__Female__unknown.46d64263d5", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        character_gender as value_field,\n        count(*) as n_records\n\n    from \"camondagster\".\"public_base\".\"base_rm_characters\"\n    group by character_gender\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Genderless','Male','Female','unknown'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.664694Z", "completed_at": "2025-05-19T01:42:25.670314Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.674442Z", "completed_at": "2025-05-19T01:42:25.674449Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01216435432434082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.accepted_values_base_rm_characters_character_status__True__Alive__unknown__Dead.a8b2d7ed1c", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        character_status as value_field,\n        count(*) as n_records\n\n    from \"camondagster\".\"public_base\".\"base_rm_characters\"\n    group by character_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Alive','unknown','Dead'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.670806Z", "completed_at": "2025-05-19T01:42:25.677048Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.681177Z", "completed_at": "2025-05-19T01:42:25.681183Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011974334716796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_rm_characters_character_id.43c52019f3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect character_id\nfrom \"camondagster\".\"public_base\".\"base_rm_characters\"\nwhere character_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.677519Z", "completed_at": "2025-05-19T01:42:25.687569Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.688097Z", "completed_at": "2025-05-19T01:42:25.688102Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012239456176757812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_rm_characters_character_id.6dc0db618b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    character_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_rm_characters\"\nwhere character_id is not null\ngroup by character_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.683638Z", "completed_at": "2025-05-19T01:42:25.689897Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.690880Z", "completed_at": "2025-05-19T01:42:25.690885Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008288383483886719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_rm_episode_character_episode_dlt_id__character_id.a7d124aeab", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        episode_dlt_id, character_id\n    from \"camondagster\".\"public_base\".\"base_rm_episode_character\"\n    group by episode_dlt_id, character_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.691613Z", "completed_at": "2025-05-19T01:42:25.700524Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.701257Z", "completed_at": "2025-05-19T01:42:25.701263Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011919260025024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_rm_episodes", "compiled": true, "compiled_code": "with characters_in_episodes as (\n    \n(\n    SELECT\n        \n            episode_dlt_id\n        ,\n        COUNT(character_id) AS Num_Characters\n    FROM \"camondagster\".\"public_base\".\"base_rm_episode_character\"\n    GROUP BY\n        \n            episode_dlt_id\n        \n)\n \n)\n\nSELECT episode_id, episode_name, \nCASE\n        WHEN episode_name ILIKE '%ricklantis%' OR episode_name ILIKE '%rickmurai%' OR episode_name ILIKE '%pickle rick%' OR episode_name ILIKE '%rickternal%' THEN 'Rick-Focused'\n        WHEN episode_name ILIKE '%morty%' OR episode_name ILIKE '%mort%' THEN 'Morty-Focused'\n        WHEN episode_name ILIKE '%interdimensional cable%' OR episode_name ILIKE '%rixty minutes%' THEN 'Interdimensional Cable'\n        WHEN episode_name ILIKE '%rick%' AND episode_name ILIKE '%mort%' THEN 'Rick & Morty Duo'\n        WHEN episode_name ILIKE '%park%' OR episode_name ILIKE '%shaym%' OR episode_name ILIKE '%recall%' OR episode_name ILIKE '%galactica%' OR episode_name ILIKE '%jack%' OR episode_name ILIKE '%tomorty%' OR episode_name ILIKE '%spotless%' THEN 'Pop Culture Reference'\n        ELSE 'Other'\n    END AS episode_group,\nepisode_air_date , episode,\nCAST(SUBSTR(episode, 2, 2) AS INTEGER) AS season_num,\n    CAST(SUBSTR(episode, 5, 2) AS INTEGER) AS episode_num\n,be.episode_dlt_id\n,cie.Num_Characters\nFROM \"camondagster\".\"public_base\".\"base_rm_episodes\" as be \nleft join characters_in_episodes as cie \non be.episode_dlt_id = cie.episode_dlt_id", "relation_name": "\"camondagster\".\"public_staging\".\"staging_rm_episodes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.696795Z", "completed_at": "2025-05-19T01:42:25.703090Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.704046Z", "completed_at": "2025-05-19T01:42:25.704051Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008401632308959961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_rm_episodes_episode_id.750f703191", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect episode_id\nfrom \"camondagster\".\"public_base\".\"base_rm_episodes\"\nwhere episode_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.704749Z", "completed_at": "2025-05-19T01:42:25.709904Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.716195Z", "completed_at": "2025-05-19T01:42:25.716202Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01370382308959961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_rm_episodes_episode_id.e1123cf950", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    episode_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_rm_episodes\"\nwhere episode_id is not null\ngroup by episode_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.718629Z", "completed_at": "2025-05-19T01:42:25.722193Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.723259Z", "completed_at": "2025-05-19T01:42:25.723265Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00579524040222168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_rm_locations", "compiled": true, "compiled_code": "with resident_per_location as (\n\t\n(\n    SELECT\n        \n            location_dlt_id\n        ,\n        COUNT(character_id) AS Num_Characters\n    FROM \"camondagster\".\"public_base\".\"base_rm_location_residents\"\n    GROUP BY\n        \n            location_dlt_id\n        \n)\n \n)\n\nSELECT bl.location_id, location_name, location_type\n,CASE\n    WHEN LOWER(location_type) IN ('planet', 'asteroid', 'quasar', 'mount', 'elemental rings', 'dwarf planet (celestial dwarf)') THEN 'Celestial Body'\n    WHEN LOWER(location_type) IN ('teenyverse', 'miniverse', 'microverse', 'diegesis', 'non-diegetic alternative reality', 'box', 'machine') THEN 'Artificial World'\n    WHEN LOWER(location_type) IN ('game', 'dream', 'memory', 'tv', 'consciousness', 'nightmare', 'fantasy town') THEN 'Virtual/Simulated'\n    WHEN LOWER(location_type) IN ('space station', 'resort', 'spa', 'base', 'police department', 'customs', 'daycare', 'spacecraft', 'arcade') THEN 'Location Type'\n    WHEN LOWER(location_type) IN ('hell', 'reality', 'liquid', 'death star', 'artificially generated world') THEN 'Abstract Realm'\n    WHEN LOWER(location_type) IN ('country', 'cluster', 'menagerie', 'convention') THEN 'Social Structure'\n    WHEN LOWER(location_type) IN ('quadrant') THEN 'Quadrant/Zone'\n    ELSE 'Unknown' END AS location_categories\n, location_dimension\n,CASE\n        WHEN location_dimension ILIKE '%unknown%' THEN 'Unclassified'\n        WHEN LOWER(location_dimension) LIKE 'dimension c%' THEN 'Standard Format'\n        WHEN location_dimension ILIKE '%Fascist%' THEN 'Fascist Variant'\n        WHEN location_dimension ILIKE '%Magic%' OR\n             location_dimension ILIKE '%Fantasy%' OR\n             location_dimension ILIKE '%Post-Apocalyptic%' OR\n             location_dimension ILIKE '%Merged%' OR\n             location_dimension ILIKE '%Evil Rick%' OR\n             location_dimension ILIKE '%Testicle%' OR\n             location_dimension ILIKE '%Eric Stoltz%' OR\n             location_dimension ILIKE '%Wasp%' OR\n             location_dimension ILIKE '%Phone%' OR\n             location_dimension ILIKE '%Spider%' OR\n             location_dimension ILIKE '%Pizza%' OR\n             location_dimension ILIKE '%Chair%' OR\n             location_dimension ILIKE '%Tusk%' OR\n             location_dimension ILIKE '%Cromulon%' THEN 'Thematic'\n        WHEN location_dimension ILIKE '%Replacement%' OR location_dimension ILIKE '%Cronenberg%' THEN 'Canonical Named'\n        ELSE 'Other' end as dimension_group\n, location_created\n,bl.location_dlt_id\n,rpl.Num_Characters\nFROM \"camondagster\".\"public_base\".\"base_rm_locations\" as bl \nleft join resident_per_location as rpl\non bl.location_dlt_id = rpl.location_dlt_id", "relation_name": "\"camondagster\".\"public_staging\".\"staging_rm_locations\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.710410Z", "completed_at": "2025-05-19T01:42:25.722641Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.723955Z", "completed_at": "2025-05-19T01:42:25.723960Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015211343765258789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_rm_location_residents_location_dlt_id__character_id.e9a4362b6b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        location_dlt_id, character_id\n    from \"camondagster\".\"public_base\".\"base_rm_location_residents\"\n    group by location_dlt_id, character_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.731459Z", "completed_at": "2025-05-19T01:42:25.735593Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.736105Z", "completed_at": "2025-05-19T01:42:25.736110Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009736299514770508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_rm_locations_location_id.98f222cc59", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_rm_locations\"\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.727908Z", "completed_at": "2025-05-19T01:42:25.736771Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.737839Z", "completed_at": "2025-05-19T01:42:25.737844Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011994361877441406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_rm_locations_location_id.a55eda5e7f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"camondagster\".\"public_base\".\"base_rm_locations\"\nwhere location_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.740647Z", "completed_at": "2025-05-19T01:42:25.749519Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.750043Z", "completed_at": "2025-05-19T01:42:25.750048Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011546850204467773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_expectations_expect_column_values_to_be_between_base_weather_latitude__90___90__False.59cb5ebebd", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and latitude >= -90 and latitude <= 90\n)\n as expression\n\n\n    from \"camondagster\".\"public_base\".\"base_weather\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.745442Z", "completed_at": "2025-05-19T01:42:25.750722Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.751794Z", "completed_at": "2025-05-19T01:42:25.751800Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011726617813110352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_expectations_expect_column_values_to_be_between_base_weather_longitude__180___180__False.f01e8833c7", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and longitude >= -180 and longitude <= 180\n)\n as expression\n\n\n    from \"camondagster\".\"public_base\".\"base_weather\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.754615Z", "completed_at": "2025-05-19T01:42:25.765399Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.766012Z", "completed_at": "2025-05-19T01:42:25.766018Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013552188873291016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_weather_weather_date__city.cca068c581", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        weather_date, city\n    from \"camondagster\".\"public_base\".\"base_weather\"\n    group by weather_date, city\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.759289Z", "completed_at": "2025-05-19T01:42:25.766709Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.767777Z", "completed_at": "2025-05-19T01:42:25.767783Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013745546340942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.relationships_base_weather_city__city__ref_base_geo_.1a216bf670", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select city as from_field\n    from \"camondagster\".\"public_base\".\"base_weather\"\n    where city is not null\n),\n\nparent as (\n    select city as to_field\n    from \"camondagster\".\"public_base\".\"base_geo\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.770731Z", "completed_at": "2025-05-19T01:42:25.778855Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.779933Z", "completed_at": "2025-05-19T01:42:25.779938Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011515617370605469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_dim_date_date_col.0abb09b4ea", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_col\nfrom \"camondagster\".\"public_common\".\"dim_date\"\nwhere date_col is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.775039Z", "completed_at": "2025-05-19T01:42:25.779481Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.780663Z", "completed_at": "2025-05-19T01:42:25.780668Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010516643524169922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_dim_date_date_col.217a54f7bd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date_col as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_common\".\"dim_date\"\nwhere date_col is not null\ngroup by date_col\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.784515Z", "completed_at": "2025-05-19T01:42:25.791260Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.791768Z", "completed_at": "2025-05-19T01:42:25.791773Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009346961975097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_beverage_glass_type", "compiled": true, "compiled_code": "SELECT glass_type, glass_type_sk\n    from \"camondagster\".\"public_snapshots\".\"glass_type_snapshot\"\n\tgroup by glass_type, glass_type_sk", "relation_name": "\"camondagster\".\"public_common\".\"dim_beverage_glass_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.787174Z", "completed_at": "2025-05-19T01:42:25.797513Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.798240Z", "completed_at": "2025-05-19T01:42:25.798246Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015277385711669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_glass_type_snapshot_beverage_id.37ac86439c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect beverage_id\nfrom \"camondagster\".\"public_snapshots\".\"glass_type_snapshot\"\nwhere beverage_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.794011Z", "completed_at": "2025-05-19T01:42:25.799030Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.800059Z", "completed_at": "2025-05-19T01:42:25.800064Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00725245475769043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_glass_type_snapshot_beverage_id.5cc2dd93e1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    beverage_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_snapshots\".\"glass_type_snapshot\"\nwhere beverage_id is not null\ngroup by beverage_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.802963Z", "completed_at": "2025-05-19T01:42:25.809122Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.810135Z", "completed_at": "2025-05-19T01:42:25.810140Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011490583419799805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_alcoholic_type", "compiled": true, "compiled_code": "SELECT alcoholic_type, \nalcoholic_type_sk\n\tFrom \"camondagster\".\"public_staging\".\"staging_beverage_lookup\"\ngroup by alcoholic_type, alcoholic_type_sk", "relation_name": "\"camondagster\".\"public_common\".\"dim_alcoholic_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.806298Z", "completed_at": "2025-05-19T01:42:25.809642Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.813056Z", "completed_at": "2025-05-19T01:42:25.813062Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010689735412597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_beverage_type", "compiled": true, "compiled_code": "select beverage_type, alcoholic_type, beverage_category_sk, Alcoholic_Type_SK\n\tFrom \"camondagster\".\"public_staging\".\"staging_beverage_lookup\"\n\tgroup by beverage_type, alcoholic_type, beverage_category_sk, Alcoholic_Type_SK", "relation_name": "\"camondagster\".\"public_common\".\"dim_beverage_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.816908Z", "completed_at": "2025-05-19T01:42:25.822964Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.823939Z", "completed_at": "2025-05-19T01:42:25.823944Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009097814559936523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_beverage_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Staging_Beverage_Consumption\n-- Description: Fact Table data, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nselect bc.id_drink as beverage_id, str_drink as beverage_name, \nbcl.beverage_category_sk as beverage_category_sk,\nstr_glass as glass_type,\nbcl.beverage_type_sk as beverage_type_sk,\nbcl.beverage_type as beverage_type,\nbcl.alcoholic_type_sk as alcoholic_type_sk,\nbcl.alcoholic_type as alcoholic_type,\nstr_category, \nstr_alcoholic, \nbgl.glass_type_sk,\nstr_instructions as beverage_instructions, str_drink_thumb as beverage_url, date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, \nstr_ingredient6, str_ingredient7, str_ingredient8\n\t-- from public_base.base_beverage_consumption as bc\n    from \"camondagster\".\"public_base\".\"base_beverage_consumption\" as bc\n\t-- left join public_base.base_beverage_glass_lookup as bgl\n    left join \"camondagster\".\"public_snapshots\".\"glass_type_snapshot\"  as bgl\n\ton bc.id_drink = bgl.beverage_id and dbt_valid_to is null\n\tleft join \"camondagster\".\"public_staging\".\"staging_beverage_lookup\"  as bcl\n\ton bc.id_drink = bcl.beverage_id", "relation_name": "\"camondagster\".\"public_staging\".\"staging_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.820116Z", "completed_at": "2025-05-19T01:42:25.823483Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.824679Z", "completed_at": "2025-05-19T01:42:25.824684Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009289741516113281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_city", "compiled": true, "compiled_code": "select city, latitude, longitude, region, City_SK,\nCountry_SK\nfrom \"camondagster\".\"public_staging\".\"staging_geo\"\ngroup by city, latitude, longitude, region, City_SK, Country_SK", "relation_name": "\"camondagster\".\"public_common\".\"dim_city\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.828610Z", "completed_at": "2025-05-19T01:42:25.834244Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.834811Z", "completed_at": "2025-05-19T01:42:25.834816Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008259773254394531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_country", "compiled": true, "compiled_code": "select country_code, country, Country_SK\nfrom \"camondagster\".\"public_staging\".\"staging_geo\"\ngroup by country_code, country, Country_SK", "relation_name": "\"camondagster\".\"public_common\".\"dim_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.831225Z", "completed_at": "2025-05-19T01:42:25.835542Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.836531Z", "completed_at": "2025-05-19T01:42:25.836536Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009442329406738281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_meal_category", "compiled": true, "compiled_code": "SELECT category_name, country_name, meal_country_category_sk\n\tFrom \"camondagster\".\"public_staging\".\"staging_meal_category_lookup\"\ngroup by category_name, country_name, meal_country_category_sk", "relation_name": "\"camondagster\".\"public_common\".\"dim_meal_category\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.839423Z", "completed_at": "2025-05-19T01:42:25.845877Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.846518Z", "completed_at": "2025-05-19T01:42:25.846523Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009223222732543945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_meal_country", "compiled": true, "compiled_code": "SELECT country_name, meal_country_sk\n\tFrom \"camondagster\".\"public_staging\".\"staging_meal_category_lookup\"\ngroup by country_name, meal_country_sk", "relation_name": "\"camondagster\".\"public_common\".\"dim_meal_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.842691Z", "completed_at": "2025-05-19T01:42:25.847207Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.848223Z", "completed_at": "2025-05-19T01:42:25.848228Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009389162063598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_meal_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Staging_Meal_Consumption\n-- Description: Fact Table data, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT bc.meal_id as meal_id, bc.meal_name as meal_name,\nbc.category_name as category_name, bc.country_name as country_name,\n-- Dim SK\nbcl.meal_country_category_sk as meal_country_category_sk,\n\nbc.instructions as instructions, bc.meal_image_url as meal_image_url, bc.meal_youtube_url as meal_youtube_url, \nstr_ingredient1, str_ingredient2, str_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8, str_ingredient9, str_ingredient10, str_ingredient11, str_ingredient12, \nstr_ingredient13, str_ingredient14, str_ingredient15, str_ingredient16, str_ingredient17, str_ingredient18, \nstr_ingredient19, str_ingredient20, bc.meal_url as meal_url\n\t-- FROM public_base.base_beverage_consumption as bc\n    FROM \"camondagster\".\"public_base\".\"base_meal_consumption\" as bc\n\tleft join \"camondagster\".\"public_staging\".\"staging_meal_category_lookup\"  as bcl\n\ton bc.meal_id = bcl.meal_id", "relation_name": "\"camondagster\".\"public_staging\".\"staging_meal_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.851202Z", "completed_at": "2025-05-19T01:42:25.859911Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.860445Z", "completed_at": "2025-05-19T01:42:25.860451Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01151585578918457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_meal_ingredient_hierarchy", "compiled": true, "compiled_code": "SELECT sil.meal_id, sil.ingredient_name as ingredient1\n,sil2.ingredient_name as ingredient2\n,sil3.ingredient_name as ingredient3\n,sil4.ingredient_name as ingredient4\nFROM \"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil\n-- Second\nleft join \"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil2\non sil.meal_id = sil2.meal_id and sil.ingredient_id != sil2.ingredient_id\n-- third\nleft join \"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil3\non sil.meal_id = sil3.meal_id and sil3.ingredient_id not in (sil2.ingredient_id, sil.ingredient_id)\n-- Fourth\nleft join \"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil4\non sil.meal_id = sil4.meal_id and sil4.ingredient_id not in (sil3.ingredient_id, sil2.ingredient_id, sil.ingredient_id)", "relation_name": "\"camondagster\".\"public_common\".\"dim_meal_ingredient_hierarchy\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.855167Z", "completed_at": "2025-05-19T01:42:25.865500Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.866057Z", "completed_at": "2025-05-19T01:42:25.866064Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015506267547607422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_meal_ingredient_jointable", "compiled": true, "compiled_code": "SELECT distinct meal_id\n    from \"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" \n    where meal_id is not null", "relation_name": "\"camondagster\".\"public_common\".\"dim_meal_ingredient_jointable\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.862798Z", "completed_at": "2025-05-19T01:42:25.867304Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.868387Z", "completed_at": "2025-05-19T01:42:25.868394Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006678581237792969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.fact_beverage_consumption", "compiled": true, "compiled_code": "SELECT beverage_id, beverage_name, glass_type_sk, Beverage_Category_SK,Beverage_Type_SK, \nAlcoholic_Type_SK, Beverage_Type, Alcoholic_type,\nbeverage_instructions, beverage_url, Glass_Type, date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, \nstr_ingredient6, str_ingredient7, str_ingredient8\n    From \"camondagster\".\"public_staging\".\"staging_beverage_consumption\"", "relation_name": "\"camondagster\".\"public_common\".\"fact_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.875152Z", "completed_at": "2025-05-19T01:42:25.878989Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.879938Z", "completed_at": "2025-05-19T01:42:25.879943Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006082773208618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_dim_city_city_sk.c481aa01d2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    city_sk as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_common\".\"dim_city\"\nwhere city_sk is not null\ngroup by city_sk\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.870163Z", "completed_at": "2025-05-19T01:42:25.879457Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.880666Z", "completed_at": "2025-05-19T01:42:25.880672Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01291966438293457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_dim_city_city_sk.ab81b8c4f2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city_sk\nfrom \"camondagster\".\"public_common\".\"dim_city\"\nwhere city_sk is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.888162Z", "completed_at": "2025-05-19T01:42:25.892047Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.892555Z", "completed_at": "2025-05-19T01:42:25.892561Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009600162506103516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_dim_country_country_sk.76e889bc85", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    country_sk as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_common\".\"dim_country\"\nwhere country_sk is not null\ngroup by country_sk\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.884531Z", "completed_at": "2025-05-19T01:42:25.897745Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.898287Z", "completed_at": "2025-05-19T01:42:25.898294Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01587367057800293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_dim_country_country_sk.86f12ec03d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_sk\nfrom \"camondagster\".\"public_common\".\"dim_country\"\nwhere country_sk is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:42:25.894890Z", "completed_at": "2025-05-19T01:42:25.899111Z"}, {"name": "execute", "started_at": "2025-05-19T01:42:25.899585Z", "completed_at": "2025-05-19T01:42:25.899589Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005807638168334961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.fact_meal_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Fact_Meal_Consumption\n-- Description: Fact Table, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT meal_id, meal_name,\ncategory_name, country_name,\nmeal_country_category_sk,\ninstructions, meal_image_url, meal_youtube_url, \nstr_ingredient1, str_ingredient2, str_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8, str_ingredient9, str_ingredient10, str_ingredient11, str_ingredient12, \nstr_ingredient13, str_ingredient14, str_ingredient15, str_ingredient16, str_ingredient17, str_ingredient18, \nstr_ingredient19, str_ingredient20, meal_url\nFROM \"camondagster\".\"public_staging\".\"staging_meal_consumption\"", "relation_name": "\"camondagster\".\"public_common\".\"fact_meal_consumption\"", "batch_results": null}], "elapsed_time": 2.710540771484375, "args": {"exclude": [], "version_check": true, "require_batched_execution_for_custom_microbatch_strategy": false, "macro_debugging": false, "defer": false, "require_explicit_package_overrides_for_builtin_materializations": true, "which": "generate", "static": false, "log_file_max_bytes": 10485760, "send_anonymous_usage_stats": true, "log_level": "info", "log_path": "/home/runner/work/CamOnDagsterDbt/CamOnDagsterDbt/dbt/logs", "introspect": true, "require_resource_names_without_spaces": false, "state_modified_compare_vars": false, "print": true, "quiet": false, "profiles_dir": "/home/runner/.dbt", "cache_selected_only": false, "use_colors_file": true, "log_format": "default", "compile": true, "partial_parse": true, "require_yaml_configuration_for_mf_time_spines": false, "project_dir": "/home/runner/work/CamOnDagsterDbt/CamOnDagsterDbt/dbt", "select": [], "show_resource_report": false, "skip_nodes_if_on_run_start_fails": false, "favor_state": false, "invocation_command": "dbt docs generate", "log_format_file": "debug", "static_parser": true, "write_json": true, "source_freshness_run_project_hooks": false, "strict_mode": false, "printer_width": 80, "partial_parse_file_diff": true, "require_nested_cumulative_type_params": false, "state_modified_compare_more_unrendered_values": false, "log_level_file": "debug", "warn_error_options": {"include": [], "exclude": []}, "empty_catalog": false, "populate_cache": true, "use_colors": true, "vars": {}, "indirect_selection": "eager"}}