{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-05-19T01:32:51.487419Z", "invocation_id": "178bbaa7-bc6d-404b-86ac-8a0e8aa97b62", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.702610Z", "completed_at": "2025-05-19T01:32:50.714140Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.715111Z", "completed_at": "2025-05-19T01:32:50.715124Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014682531356811523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_beverage_consumption", "compiled": true, "compiled_code": "SELECT id_drink, str_drink, str_category, str_alcoholic, str_glass, str_instructions, \nstr_drink_thumb, (date_modified AT TIME ZONE 'Australia/Melbourne')::date AS date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8\n\t-- FROM cocktail_data.consumption\n    from \"camondagster\".\"beverage_data\".\"consumption\"", "relation_name": "\"camondagster\".\"public_base\".\"base_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.710622Z", "completed_at": "2025-05-19T01:32:50.714657Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.715882Z", "completed_at": "2025-05-19T01:32:50.715889Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014908075332641602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_beverage_ingredients_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_beverage_ingredients_lookup\n-- Description: Base Table for Beverage Ingredients\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- 2025-05-12 | Cam      | Added logic to filter out null beverage IDs\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nSelect it.source_ingredient as Ingredient,\nit.id_drink as beverage_id,\nit.str_drink as Beverage_Name\nfrom \"camondagster\".\"beverage_data\".\"ingredients_table\"  as it\nwhere it.id_drink is not null", "relation_name": "\"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.720029Z", "completed_at": "2025-05-19T01:32:50.727122Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.727654Z", "completed_at": "2025-05-19T01:32:50.727664Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009819507598876953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_beverages", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Beverages\n-- Description: Base Table for multiple Dims - Bev Type, Alcoholic Type and Beverage Name\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nselect bt.str_drink as beverage_name, \n    bt.id_drink as beverage_id, \n\tbt.source_beverage_type as beverage_type,\n\tmd5(cast(coalesce(cast(source_beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_alcohol_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_category_sk,\n\tact.source_alcohol_type as alcoholic_type\n\tfrom \"camondagster\".\"beverage_data\".\"beverages_table\" as bt\n    left join \"camondagster\".\"beverage_data\".\"alcoholic_table\" as act \n\ton bt.id_drink = act.id_drink", "relation_name": "\"camondagster\".\"public_base\".\"base_beverages\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.724143Z", "completed_at": "2025-05-19T01:32:50.728915Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.730136Z", "completed_at": "2025-05-19T01:32:50.730146Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011850357055664062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_geo", "compiled": true, "compiled_code": "SELECT city_id, city, latitude, longitude, country_code, country, region, continent\nFrom \"camondagster\".\"geo_data\".\"geo_cities\" \nwhere country in ('New Zealand', 'United Kingdom', 'Australia', 'Canada')", "relation_name": "\"camondagster\".\"public_base\".\"base_geo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.732070Z", "completed_at": "2025-05-19T01:32:50.741834Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.742395Z", "completed_at": "2025-05-19T01:32:50.742404Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013085126876831055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_gsheets_finance", "compiled": true, "compiled_code": "SELECT \n    Id, \n    stock, \n    CAST(price AS DECIMAL) AS price,  -- DuckDB doesn't have a money type\n    date_time AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS date_time,\n    ROUND((MAX(price) OVER(PARTITION BY stock) - MIN(price) OVER(PARTITION BY stock)), 2) AS price_spread,\n    ROUND((LAST(price) OVER(PARTITION BY stock ORDER BY date_time) - FIRST(price) OVER(PARTITION BY stock)), 2) AS relative_price_movement,\n    ROUND((LAST(price) OVER(PARTITION BY stock) - FIRST(price) OVER(PARTITION BY stock)), 2) AS abs_price_movement,\n    COUNT(id) OVER(PARTITION BY stock) AS Num_Stock_Entries\nFROM \"camondagster\".\"google_sheets_data\".\"gsheets_finance\"", "relation_name": "\"camondagster\".\"public_base\".\"base_gsheets_finance\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.736210Z", "completed_at": "2025-05-19T01:32:50.743673Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.744874Z", "completed_at": "2025-05-19T01:32:50.744881Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009886503219604492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_meal_category_country", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_meal_category_country\n-- Description: Base Table for multiple Dims - meal category, meal country\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT ct.str_meal as meal_name, ct.id_meal as meal_id, \n\tct.source_country as country_name,\n\tmd5(cast(coalesce(cast(source_country as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_category as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as meal_country_category_sk,\n\tcat.source_category as category_name\nFROM \"camondagster\".\"meals_data\".\"country_table\" as ct\n\tleft join \"camondagster\".\"meals_data\".\"category_table\" as cat \n\ton ct.id_meal = cat.id_meal", "relation_name": "\"camondagster\".\"public_base\".\"base_meal_category_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.746706Z", "completed_at": "2025-05-19T01:32:50.753915Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.754513Z", "completed_at": "2025-05-19T01:32:50.754520Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010319232940673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_meal_consumption", "compiled": true, "compiled_code": "select id_meal as meal_id, str_meal as meal_name, str_category as category_name, str_area as country_name, \nstr_instructions as instructions, str_meal_thumb as meal_image_url, str_youtube as meal_youtube_url, \nNULLIF(str_ingredient1, '') as str_ingredient1, \nNULLIF(str_ingredient2, '') as str_ingredient2,\nNULLIF(str_ingredient3, '') as str_ingredient3,\nNULLIF(str_ingredient4, '') as str_ingredient4,\nNULLIF(str_ingredient5, '') as str_ingredient5,\nNULLIF(str_ingredient6, '') as str_ingredient6,\nNULLIF(str_ingredient7, '') as str_ingredient7, \nNULLIF(str_ingredient8, '') as str_ingredient8,\nNULLIF(str_ingredient9, '') as str_ingredient9,\nNULLIF(str_ingredient10, '') as str_ingredient10,\nNULLIF(str_ingredient11, '') as str_ingredient11,\nNULLIF(str_ingredient12, '') as str_ingredient12,\nNULLIF(str_ingredient13, '') as str_ingredient13,\nNULLIF(str_ingredient14, '') as str_ingredient14,\nNULLIF(str_ingredient15, '') as str_ingredient15,\nNULLIF(str_ingredient16, '') as str_ingredient16,\nNULLIF(str_ingredient17, '') as str_ingredient17,\nNULLIF(str_ingredient18, '') as str_ingredient18,\nNULLIF(str_ingredient19, '') as str_ingredient19,\nNULLIF(str_ingredient20, '') as str_ingredient20,\nstr_source as meal_url\n    from \"camondagster\".\"meals_data\".\"consumption\"", "relation_name": "\"camondagster\".\"public_base\".\"base_meal_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.751104Z", "completed_at": "2025-05-19T01:32:50.755204Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.756289Z", "completed_at": "2025-05-19T01:32:50.756296Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0065882205963134766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_meal_ingredient_table", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_meal_ingredient_table\n-- Description: Base Table for list of meals for each ingredient\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT str_meal as meal_name, id_meal as meal_id, \nsource_ingredient as ingredient_name\nFROM \"camondagster\".\"meals_data\".\"ingredient_table\"", "relation_name": "\"camondagster\".\"public_base\".\"base_meal_ingredient_table\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.759244Z", "completed_at": "2025-05-19T01:32:50.768944Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.769463Z", "completed_at": "2025-05-19T01:32:50.769469Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012445926666259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_meal_ingredients", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_meal_ingredients\n-- Description: Base Table for meal ingredients - Only Needed for Ingredient ID (Int)\n-- Fast Comparison\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT id_ingredient::INTEGER as ingredient_id, str_ingredient as ingredient_name\nFROM \"camondagster\".\"meals_data\".\"ingredients\"", "relation_name": "\"camondagster\".\"public_base\".\"base_meal_ingredients\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.763028Z", "completed_at": "2025-05-19T01:32:50.770788Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.772263Z", "completed_at": "2025-05-19T01:32:50.772271Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01363229751586914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_openlibrary", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_Beverage_openlibrary\n-- Description: Unioning Tables with Books seperated by Search and Filter term\n-- from the OpenLibrary API, the point of this is to test using both DLT State\n-- & DuckDb connection to check for New API data (via DLT State) and deleted or\n-- truncation data loss with DuckDB sql comparison with DLT State.\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-15 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"sql_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"python_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"data_warehousing_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"data_engineering_books\" \nunion all\nSELECT search_term, topic_filter, title, author_name, \npublish_year, edition_count, key, subject_str\nFROM \"camondagster\".\"openlibrary_data\".\"apache_airflow_books\"", "relation_name": "\"camondagster\".\"public_base\".\"base_openlibrary\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.774028Z", "completed_at": "2025-05-19T01:32:50.781238Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.781770Z", "completed_at": "2025-05-19T01:32:50.781777Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010248899459838867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_character_episode", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_character_episode\n-- Description: Base join table\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT\n  _dlt_root_id AS character_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS episode_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"character__episode\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_character_episode\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.778280Z", "completed_at": "2025-05-19T01:32:50.782528Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.783597Z", "completed_at": "2025-05-19T01:32:50.783603Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006543874740600586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_characters", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_characters\n-- Description: Base Table for ricky and morty characters from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nSELECT id as character_id, name as character_name, status as character_status, \nspecies as character_species, gender as character_gender, \norigin__name as character_origin, \nlocation__name as character_first_location, location__url as character_first_location_url, \nimage as character_image, url as character_url, \ncreated AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS character_created\n, \"_dlt_id\" as character_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"character\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_characters\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.786761Z", "completed_at": "2025-05-19T01:32:50.794609Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.795077Z", "completed_at": "2025-05-19T01:32:50.795082Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010781288146972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_episode_character", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Base_rm_episode_character\n-- Description: Base join table\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT\n  _dlt_root_id AS episode_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS character_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"episode__characters\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_episode_character\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.791830Z", "completed_at": "2025-05-19T01:32:50.800274Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.800910Z", "completed_at": "2025-05-19T01:32:50.800917Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014776229858398438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_episodes", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_rm_episode\n-- Description: Base Table for ricky and morty episodes from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\nSELECT id as episode_id, name as episode_name\n,STRPTIME(air_date, '%B %d, %Y') AS episode_air_date\n, episode, url as episode_url\n,created AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS episode_created \n,\"_dlt_id\" as episode_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"episode\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_episodes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.797483Z", "completed_at": "2025-05-19T01:32:50.802836Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.803979Z", "completed_at": "2025-05-19T01:32:50.803985Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007754087448120117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_location_residents", "compiled": true, "compiled_code": "SELECT\n  _dlt_root_id AS location_dlt_id,\n  CAST(regexp_replace(value, '.*/(\\d+)$', '\\1') AS INTEGER) AS character_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"location__residents\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_location_residents\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.804705Z", "completed_at": "2025-05-19T01:32:50.811890Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.812413Z", "completed_at": "2025-05-19T01:32:50.812419Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010190725326538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_rm_locations", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: base_rm_locations\n-- Description: Base Table for ricky and morty locations from API\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-16 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT id as location_id, name as location_name, type as location_type, \ndimension as location_dimension, url as location_url\n,created AT TIME ZONE 'UTC' AT TIME ZONE 'Australia/Melbourne' AS location_created\n,\"_dlt_id\" as location_dlt_id\nFROM \"camondagster\".\"rick_and_morty_data\".\"location\"", "relation_name": "\"camondagster\".\"public_base\".\"base_rm_locations\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.809195Z", "completed_at": "2025-05-19T01:32:50.813104Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.814166Z", "completed_at": "2025-05-19T01:32:50.814171Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00599360466003418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.base_weather", "compiled": true, "compiled_code": "SELECT (date)::date as weather_date, city, temperature_max, temperature_min, temperature_mean, precipitation_sum, \nwindspeed_max, windgusts_max, sunshine_duration, location__lat as latitude, location__lng as longitude\nFROM \"camondagster\".\"weather_data\".\"daily_weather\"", "relation_name": "\"camondagster\".\"public_base\".\"base_weather\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.817233Z", "completed_at": "2025-05-19T01:32:50.822593Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.823124Z", "completed_at": "2025-05-19T01:32:50.823130Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008209466934204102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_beverage_ingredient_jointable", "compiled": true, "compiled_code": "SELECT distinct id_drink as Beverage_ID\n    from \"camondagster\".\"beverage_data\".\"ingredients_table\" as it\n    where id_drink is not null", "relation_name": "\"camondagster\".\"public_common\".\"dim_beverage_ingredient_jointable\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.820508Z", "completed_at": "2025-05-19T01:32:50.823944Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.824922Z", "completed_at": "2025-05-19T01:32:50.824927Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008259296417236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_date", "compiled": true, "compiled_code": "WITH RECURSIVE date_series AS (\n    SELECT DATE '2000-01-01' AS date\n    UNION ALL\n    SELECT date + INTERVAL '1 day'\n    FROM date_series\n    WHERE date + INTERVAL '1 day' < DATE '2030-01-01'\n)\nSELECT\n    date AS date_col,\n    EXTRACT(YEAR FROM date) AS year,\n    EXTRACT(MONTH FROM date) AS month,\n    EXTRACT(DAY FROM date) AS day,\n    strftime('%B', date) AS month_name,  -- Replacing TO_CHAR with strftime\n    strftime('%A', date) AS weekday_name,  -- Replacing TO_CHAR with strftime\n    EXTRACT(DOW FROM date) AS day_of_week,\n    CASE WHEN EXTRACT(DOW FROM date) IN (0, 6) THEN TRUE ELSE FALSE END AS is_weekend,\n    EXTRACT(DOY FROM date) AS day_of_year,\n    EXTRACT(WEEK FROM date) AS week_of_year,\n    EXTRACT(QUARTER FROM date) AS quarter\nFROM date_series", "relation_name": "\"camondagster\".\"public_common\".\"dim_date\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.827796Z", "completed_at": "2025-05-19T01:32:50.831400Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.832522Z", "completed_at": "2025-05-19T01:32:50.832528Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006952524185180664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.camondagster.glass_type_snapshot", "compiled": true, "compiled_code": "\n\n\n\nSELECT \n    id_drink as beverage_id, source_glass as glass_type\n    ,md5(cast(coalesce(cast(glass_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as Glass_Type_SK\nfrom \"camondagster\".\"beverage_data\".\"glass_table\"\n", "relation_name": "\"camondagster\".\"public_snapshots\".\"glass_type_snapshot\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.833228Z", "completed_at": "2025-05-19T01:32:50.844721Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.849022Z", "completed_at": "2025-05-19T01:32:50.849028Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021819353103637695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_gsheets_gsheets_finance_id.3104f01e33", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"camondagster\".\"google_sheets_data\".\"gsheets_finance\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.845185Z", "completed_at": "2025-05-19T01:32:50.855119Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.855717Z", "completed_at": "2025-05-19T01:32:50.855723Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012084484100341797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_openlibrary_apache_airflow_books_key.013e7c07bb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"openlibrary_data\".\"apache_airflow_books\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.851433Z", "completed_at": "2025-05-19T01:32:50.856473Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.857547Z", "completed_at": "2025-05-19T01:32:50.857553Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007186412811279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_openlibrary_data_engineering_books_key.066b4bba14", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"openlibrary_data\".\"data_engineering_books\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.860315Z", "completed_at": "2025-05-19T01:32:50.868620Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.869215Z", "completed_at": "2025-05-19T01:32:50.869221Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01104879379272461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_openlibrary_data_warehousing_books_key.8ca1507d40", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"openlibrary_data\".\"data_warehousing_books\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.864708Z", "completed_at": "2025-05-19T01:32:50.870561Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.871624Z", "completed_at": "2025-05-19T01:32:50.871631Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011904001235961914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_openlibrary_python_books_key.2e25c37883", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"openlibrary_data\".\"python_books\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.873462Z", "completed_at": "2025-05-19T01:32:50.884172Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.884787Z", "completed_at": "2025-05-19T01:32:50.884795Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013799428939819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_not_null_openlibrary_sql_books_key.7dea3fa6c0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"openlibrary_data\".\"sql_books\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.878305Z", "completed_at": "2025-05-19T01:32:50.892255Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.892784Z", "completed_at": "2025-05-19T01:32:50.892791Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015698671340942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_gsheets_gsheets_finance_id.edff15d707", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"google_sheets_data\".\"gsheets_finance\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.887164Z", "completed_at": "2025-05-19T01:32:50.898922Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.899932Z", "completed_at": "2025-05-19T01:32:50.899938Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01393270492553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_openlibrary_apache_airflow_books_key.e5a73d623a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"openlibrary_data\".\"apache_airflow_books\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.895254Z", "completed_at": "2025-05-19T01:32:50.899466Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.900692Z", "completed_at": "2025-05-19T01:32:50.900699Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006526470184326172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_openlibrary_data_engineering_books_key.a0d050f7e4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"openlibrary_data\".\"data_engineering_books\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.904575Z", "completed_at": "2025-05-19T01:32:50.912261Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.912821Z", "completed_at": "2025-05-19T01:32:50.912828Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01036691665649414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_openlibrary_data_warehousing_books_key.3496bcbb08", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"openlibrary_data\".\"data_warehousing_books\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.908310Z", "completed_at": "2025-05-19T01:32:50.914102Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.915172Z", "completed_at": "2025-05-19T01:32:50.915180Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012199640274047852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_openlibrary_python_books_key.00e67edb2f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"openlibrary_data\".\"python_books\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.916995Z", "completed_at": "2025-05-19T01:32:50.925469Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.925998Z", "completed_at": "2025-05-19T01:32:50.926006Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011475086212158203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.source_unique_openlibrary_sql_books_key.780888e7a3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"openlibrary_data\".\"sql_books\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.921699Z", "completed_at": "2025-05-19T01:32:50.932568Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.933052Z", "completed_at": "2025-05-19T01:32:50.933058Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01255488395690918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_beverage_consumption_id_drink.561caf7667", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_drink\nfrom \"camondagster\".\"public_base\".\"base_beverage_consumption\"\nwhere id_drink is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.928336Z", "completed_at": "2025-05-19T01:32:50.934834Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:50.935788Z", "completed_at": "2025-05-19T01:32:50.935794Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008516311645507812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_beverage_ingredient_hierarchy", "compiled": true, "compiled_code": "SELECT bil.ingredient, bil.beverage_id, bil.beverage_name\n\t,bil2.ingredient as ingredient2\n\t,bil3.ingredient as ingredient3\n\t,bil4.ingredient as ingredient4\n\t,bil5.ingredient as ingredient5\n\t,bil6.ingredient as ingredient6\n\t,bil7.ingredient as ingredient7\n\t-- FROM public_base.base_beverage_ingredients_lookup as bil\n    from \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil\n\t-- Second\n\t-- left join public_base.base_beverage_ingredients_lookup as bil2 \n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil2\n\ton bil.beverage_id = bil2.beverage_id and bil.ingredient != bil2.ingredient\n\t-- Third\n\t-- left join public_base.base_beverage_ingredients_lookup as bil3\n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil3\n\ton bil.beverage_id = bil3.beverage_id and bil3.ingredient not in (bil2.ingredient, bil.ingredient)\n\t-- Fourth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil4\n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil4\n\ton bil.beverage_id = bil4.beverage_id and bil4.ingredient not in (bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- Fifth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil5\n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil5\n\ton bil.beverage_id = bil5.beverage_id and bil5.ingredient not in (bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- sixth\n\t-- left join public_base.base_beverage_ingredients_lookup as bil6\n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil6\n\ton bil.beverage_id = bil6.beverage_id and bil6.ingredient not in (bil5.ingredient, bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n\t-- seventh\n\t-- left join public_base.base_beverage_ingredients_lookup as bil7\n    left join \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\" as bil7\n\ton bil.beverage_id = bil7.beverage_id and bil7.ingredient not in (bil6.ingredient, bil5.ingredient, bil4.ingredient ,bil3.ingredient, bil2.ingredient, bil.ingredient)\n-- \twhere bil.beverage_id = '17836'\n\torder by ingredient desc, beverage_name desc, ingredient2 desc", "relation_name": "\"camondagster\".\"public_common\".\"dim_beverage_ingredient_hierarchy\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.936510Z", "completed_at": "2025-05-19T01:32:51.025805Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.026554Z", "completed_at": "2025-05-19T01:32:51.026561Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0923299789428711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_beverage_ingredients_lookup_ingredient__beverage_id.b326d9a641", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ingredient, beverage_id\n    from \"camondagster\".\"public_base\".\"base_beverage_ingredients_lookup\"\n    group by ingredient, beverage_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:50.943617Z", "completed_at": "2025-05-19T01:32:51.033235Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.033853Z", "completed_at": "2025-05-19T01:32:51.033862Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09131002426147461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_beverage_lookup", "compiled": true, "compiled_code": "select beverage_name, \n\t-- used in dim_beverage to connect to consumption\n    beverage_id, \n\tbeverage_type,\n\t-- used in dim_beverage and dim_beverage_type as the connection\n\tmd5(cast(coalesce(cast(beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_type_sk,\n\t-- used in dim_alcoholic_type and dim_beverage_type as connection\n\tmd5(cast(coalesce(cast(beverage_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(alcoholic_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as beverage_category_sk,\n\talcoholic_type,\n\t-- in dim_alcoholic_type encase any future fact tables need to connect directly \n\tmd5(cast(coalesce(cast(alcoholic_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as alcoholic_type_sk\n    from \"camondagster\".\"public_base\".\"base_beverages\"", "relation_name": "\"camondagster\".\"public_staging\".\"staging_beverage_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.029038Z", "completed_at": "2025-05-19T01:32:51.040468Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.041102Z", "completed_at": "2025-05-19T01:32:51.041108Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013249874114990234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.accepted_values_base_beverages_alcoholic_type__True__Non_alcoholic__Optional_alcohol__Alcoholic.34c9662782", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        alcoholic_type as value_field,\n        count(*) as n_records\n\n    from \"camondagster\".\"public_base\".\"base_beverages\"\n    group by alcoholic_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Non alcoholic','Optional alcohol','Alcoholic'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.036405Z", "completed_at": "2025-05-19T01:32:51.041845Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.042924Z", "completed_at": "2025-05-19T01:32:51.042930Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007843017578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_beverages_beverage_id.b8f3d5637e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect beverage_id\nfrom \"camondagster\".\"public_base\".\"base_beverages\"\nwhere beverage_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.045764Z", "completed_at": "2025-05-19T01:32:51.054965Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.055475Z", "completed_at": "2025-05-19T01:32:51.055480Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011907577514648438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_beverages_beverage_name.4ae5d66d1b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect beverage_name\nfrom \"camondagster\".\"public_base\".\"base_beverages\"\nwhere beverage_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.050282Z", "completed_at": "2025-05-19T01:32:51.057732Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.062070Z", "completed_at": "2025-05-19T01:32:51.062076Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016921043395996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.relationships_base_beverage_consumption_id_drink__beverage_id__ref_base_beverages_.e5e651a6ba", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select id_drink as from_field\n    from \"camondagster\".\"public_base\".\"base_beverage_consumption\"\n    where id_drink is not null\n),\n\nparent as (\n    select beverage_id as to_field\n    from \"camondagster\".\"public_base\".\"base_beverages\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.058217Z", "completed_at": "2025-05-19T01:32:51.064012Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.064995Z", "completed_at": "2025-05-19T01:32:51.065000Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008385658264160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_beverages_beverage_id.fca0ee3980", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    beverage_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_beverages\"\nwhere beverage_id is not null\ngroup by beverage_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.065737Z", "completed_at": "2025-05-19T01:32:51.077168Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.077717Z", "completed_at": "2025-05-19T01:32:51.077722Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014263629913330078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_beverages_beverage_name.a2d4fd1356", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    beverage_name as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_beverages\"\nwhere beverage_name is not null\ngroup by beverage_name\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.071181Z", "completed_at": "2025-05-19T01:32:51.078447Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.079566Z", "completed_at": "2025-05-19T01:32:51.079572Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009445905685424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_geo", "compiled": true, "compiled_code": "select city_id, city, latitude, longitude, country_code, country, region, \nmd5(cast(coalesce(cast(city as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as City_SK,\nmd5(cast(coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as Country_SK\nfrom \"camondagster\".\"public_base\".\"base_geo\"", "relation_name": "\"camondagster\".\"public_staging\".\"staging_geo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.087225Z", "completed_at": "2025-05-19T01:32:51.091699Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.092210Z", "completed_at": "2025-05-19T01:32:51.092218Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010190486907958984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_expectations_expect_column_values_to_be_between_base_geo_latitude__90___90__False.c3084ce8f0", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and latitude >= -90 and latitude <= 90\n)\n as expression\n\n\n    from \"camondagster\".\"public_base\".\"base_geo\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.082811Z", "completed_at": "2025-05-19T01:32:51.099015Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.099548Z", "completed_at": "2025-05-19T01:32:51.099554Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01930832862854004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.accepted_values_base_geo_country_code__True__AU__NZ__CA__GB.a3d3afa24f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        country_code as value_field,\n        count(*) as n_records\n\n    from \"camondagster\".\"public_base\".\"base_geo\"\n    group by country_code\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'AU','NZ','CA','GB'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.094681Z", "completed_at": "2025-05-19T01:32:51.101378Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.102387Z", "completed_at": "2025-05-19T01:32:51.102394Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008928060531616211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_expectations_expect_column_values_to_be_between_base_geo_longitude__180___180__False.5d5a8f0a6a", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and longitude >= -180 and longitude <= 180\n)\n as expression\n\n\n    from \"camondagster\".\"public_base\".\"base_geo\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.103120Z", "completed_at": "2025-05-19T01:32:51.108564Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.112841Z", "completed_at": "2025-05-19T01:32:51.112849Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012075185775756836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_geo_city_id.94562eb347", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city_id\nfrom \"camondagster\".\"public_base\".\"base_geo\"\nwhere city_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.109022Z", "completed_at": "2025-05-19T01:32:51.115334Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.119516Z", "completed_at": "2025-05-19T01:32:51.119523Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012107610702514648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_geo_city_id.a4c893fe58", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    city_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_geo\"\nwhere city_id is not null\ngroup by city_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.115788Z", "completed_at": "2025-05-19T01:32:51.127877Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.128409Z", "completed_at": "2025-05-19T01:32:51.128416Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014224052429199219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_gsheets_finance_id.0d75c08608", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"camondagster\".\"public_base\".\"base_gsheets_finance\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.122030Z", "completed_at": "2025-05-19T01:32:51.134290Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.134826Z", "completed_at": "2025-05-19T01:32:51.134831Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013960599899291992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_gsheets_finance_id.81717edef5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_gsheets_finance\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.130781Z", "completed_at": "2025-05-19T01:32:51.140860Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.141419Z", "completed_at": "2025-05-19T01:32:51.141427Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01176905632019043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_meal_category_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: staging_meal_category_lookup\n-- Description: Staging Table, lookup for category and country per meal, used for Dim\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\n\nSELECT \n\tmeal_name, \n\tmeal_id, category_name,  \n\t-- Used in Dim_Meal_Category and Dim_Meal_Country\n\tmeal_country_category_sk,\n\tcountry_name,\n\t-- In Dim_Meal_Country encase any future fact tables need to connect directly \n\tmd5(cast(coalesce(cast(country_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as meal_country_sk\n    From \"camondagster\".\"public_base\".\"base_meal_category_country\"", "relation_name": "\"camondagster\".\"public_staging\".\"staging_meal_category_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.137153Z", "completed_at": "2025-05-19T01:32:51.147722Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.148375Z", "completed_at": "2025-05-19T01:32:51.148383Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012316703796386719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_meal_category_country_meal_id.f1fc6a2e02", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect meal_id\nfrom \"camondagster\".\"public_base\".\"base_meal_category_country\"\nwhere meal_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.143994Z", "completed_at": "2025-05-19T01:32:51.149647Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.150726Z", "completed_at": "2025-05-19T01:32:51.150734Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008060693740844727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_meal_category_country_meal_id.96de22ba03", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    meal_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_meal_category_country\"\nwhere meal_id is not null\ngroup by meal_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.152530Z", "completed_at": "2025-05-19T01:32:51.162393Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.162909Z", "completed_at": "2025-05-19T01:32:51.162914Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012824058532714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_meal_consumption_meal_id.5801469d88", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect meal_id\nfrom \"camondagster\".\"public_base\".\"base_meal_consumption\"\nwhere meal_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.157678Z", "completed_at": "2025-05-19T01:32:51.169557Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.170093Z", "completed_at": "2025-05-19T01:32:51.170100Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013686895370483398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.relationships_base_meal_consumption_meal_id__meal_id__ref_base_meal_category_country_.ebae62c8a2", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select meal_id as from_field\n    from \"camondagster\".\"public_base\".\"base_meal_consumption\"\n    where meal_id is not null\n),\n\nparent as (\n    select meal_id as to_field\n    from \"camondagster\".\"public_base\".\"base_meal_category_country\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.165370Z", "completed_at": "2025-05-19T01:32:51.177594Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.178106Z", "completed_at": "2025-05-19T01:32:51.178112Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013980865478515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_meal_ingredient_table_ingredient_name__meal_id.319098ed2d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ingredient_name, meal_id\n    from \"camondagster\".\"public_base\".\"base_meal_ingredient_table\"\n    group by ingredient_name, meal_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.172480Z", "completed_at": "2025-05-19T01:32:51.184182Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.184723Z", "completed_at": "2025-05-19T01:32:51.184730Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013426065444946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_meal_ingredients_lookup", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: staging_meal_ingredients_lookup\n-- Description: Staging Table, lookup for Ingredients for each meal, used for Dim\n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT mit.meal_name, mit.meal_id, mit.ingredient_name, mi.ingredient_id\n\tFROM \"camondagster\".\"public_base\".\"base_meal_ingredient_table\" as mit \n\tleft join \"camondagster\".\"public_base\".\"base_meal_ingredients\" as mi \n\ton mit.ingredient_name = mi.ingredient_name", "relation_name": "\"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.180433Z", "completed_at": "2025-05-19T01:32:51.191815Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.192466Z", "completed_at": "2025-05-19T01:32:51.192473Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013178586959838867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_meal_ingredients_ingredient_id.0a9dcc549e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingredient_id\nfrom \"camondagster\".\"public_base\".\"base_meal_ingredients\"\nwhere ingredient_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.187886Z", "completed_at": "2025-05-19T01:32:51.194401Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.195388Z", "completed_at": "2025-05-19T01:32:51.195396Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008781909942626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_meal_ingredients_ingredient_id.a78af5b0c2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ingredient_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_meal_ingredients\"\nwhere ingredient_id is not null\ngroup by ingredient_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.201778Z", "completed_at": "2025-05-19T01:32:51.205623Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.206637Z", "completed_at": "2025-05-19T01:32:51.206645Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006028413772583008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_openlibrary_key.c2996aab1f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    key as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_openlibrary\"\nwhere key is not null\ngroup by key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.196116Z", "completed_at": "2025-05-19T01:32:51.206132Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.207395Z", "completed_at": "2025-05-19T01:32:51.207403Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013621091842651367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_openlibrary_key.4f2c5727d5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect key\nfrom \"camondagster\".\"public_base\".\"base_openlibrary\"\nwhere key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.215557Z", "completed_at": "2025-05-19T01:32:51.219283Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.219829Z", "completed_at": "2025-05-19T01:32:51.219836Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010072469711303711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_rm_characters", "compiled": true, "compiled_code": "with episodes_per_character as (\n  \n(\n    SELECT\n        \n            character_dlt_id\n        ,\n        COUNT(episode_id) AS Num_Episodes\n    FROM \"camondagster\".\"public_base\".\"base_rm_character_episode\"\n    GROUP BY\n        \n            character_dlt_id\n        \n)\n \n)\n\nSELECT bc.character_id, character_name, \nCASE\n    WHEN regexp_matches(character_name, '^Rick\\b', 'i') THEN 'Rick'\n    WHEN regexp_matches(character_name, '^Morty\\b', 'i') THEN 'Morty'\n    WHEN regexp_matches(character_name, '^Summer\\b', 'i') THEN 'Summer'\n    WHEN regexp_matches(character_name, '^Beth\\b', 'i') THEN 'Beth'\n    WHEN regexp_matches(character_name, '^Jerry\\b', 'i') THEN 'Jerry'\n    ELSE 'Other'\n  END AS character_group,\ncharacter_status, character_species, \ncharacter_gender, character_origin,\ncharacter_image, character_created, bc.character_dlt_id, epc.Num_Episodes\nFROM \"camondagster\".\"public_base\".\"base_rm_characters\" as bc \nleft join episodes_per_character as epc\non bc.character_dlt_id = epc.character_dlt_id\norder by bc.character_id", "relation_name": "\"camondagster\".\"public_staging\".\"staging_rm_characters\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.211376Z", "completed_at": "2025-05-19T01:32:51.227336Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.229386Z", "completed_at": "2025-05-19T01:32:51.229395Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020195484161376953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_rm_character_episode_character_dlt_id__episode_id.54e2562ff2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        character_dlt_id, episode_id\n    from \"camondagster\".\"public_base\".\"base_rm_character_episode\"\n    group by character_dlt_id, episode_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.222229Z", "completed_at": "2025-05-19T01:32:51.236148Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.236724Z", "completed_at": "2025-05-19T01:32:51.236730Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015658855438232422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.accepted_values_base_rm_characters_character_gender__True__Genderless__Male__Female__unknown.46d64263d5", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        character_gender as value_field,\n        count(*) as n_records\n\n    from \"camondagster\".\"public_base\".\"base_rm_characters\"\n    group by character_gender\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Genderless','Male','Female','unknown'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.232099Z", "completed_at": "2025-05-19T01:32:51.238708Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.239714Z", "completed_at": "2025-05-19T01:32:51.239721Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008914470672607422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.accepted_values_base_rm_characters_character_status__True__Alive__unknown__Dead.a8b2d7ed1c", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        character_status as value_field,\n        count(*) as n_records\n\n    from \"camondagster\".\"public_base\".\"base_rm_characters\"\n    group by character_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Alive','unknown','Dead'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.240499Z", "completed_at": "2025-05-19T01:32:51.250619Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.251135Z", "completed_at": "2025-05-19T01:32:51.251143Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013114452362060547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_rm_characters_character_id.43c52019f3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect character_id\nfrom \"camondagster\".\"public_base\".\"base_rm_characters\"\nwhere character_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.246377Z", "completed_at": "2025-05-19T01:32:51.252427Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.253512Z", "completed_at": "2025-05-19T01:32:51.253521Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008330583572387695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_rm_characters_character_id.6dc0db618b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    character_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_rm_characters\"\nwhere character_id is not null\ngroup by character_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.255377Z", "completed_at": "2025-05-19T01:32:51.264650Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.265172Z", "completed_at": "2025-05-19T01:32:51.265179Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01234579086303711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_rm_episode_character_episode_dlt_id__character_id.a7d124aeab", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        episode_dlt_id, character_id\n    from \"camondagster\".\"public_base\".\"base_rm_episode_character\"\n    group by episode_dlt_id, character_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.260793Z", "completed_at": "2025-05-19T01:32:51.267098Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.268092Z", "completed_at": "2025-05-19T01:32:51.268100Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00860285758972168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_rm_episodes", "compiled": true, "compiled_code": "with characters_in_episodes as (\n    \n(\n    SELECT\n        \n            episode_dlt_id\n        ,\n        COUNT(character_id) AS Num_Characters\n    FROM \"camondagster\".\"public_base\".\"base_rm_episode_character\"\n    GROUP BY\n        \n            episode_dlt_id\n        \n)\n \n)\n\nSELECT episode_id, episode_name, \nCASE\n        WHEN episode_name ILIKE '%ricklantis%' OR episode_name ILIKE '%rickmurai%' OR episode_name ILIKE '%pickle rick%' OR episode_name ILIKE '%rickternal%' THEN 'Rick-Focused'\n        WHEN episode_name ILIKE '%morty%' OR episode_name ILIKE '%mort%' THEN 'Morty-Focused'\n        WHEN episode_name ILIKE '%interdimensional cable%' OR episode_name ILIKE '%rixty minutes%' THEN 'Interdimensional Cable'\n        WHEN episode_name ILIKE '%rick%' AND episode_name ILIKE '%mort%' THEN 'Rick & Morty Duo'\n        WHEN episode_name ILIKE '%park%' OR episode_name ILIKE '%shaym%' OR episode_name ILIKE '%recall%' OR episode_name ILIKE '%galactica%' OR episode_name ILIKE '%jack%' OR episode_name ILIKE '%tomorty%' OR episode_name ILIKE '%spotless%' THEN 'Pop Culture Reference'\n        ELSE 'Other'\n    END AS episode_group,\nepisode_air_date , episode,\nCAST(SUBSTR(episode, 2, 2) AS INTEGER) AS season_num,\n    CAST(SUBSTR(episode, 5, 2) AS INTEGER) AS episode_num\n,be.episode_dlt_id\n,cie.Num_Characters\nFROM \"camondagster\".\"public_base\".\"base_rm_episodes\" as be \nleft join characters_in_episodes as cie \non be.episode_dlt_id = cie.episode_dlt_id", "relation_name": "\"camondagster\".\"public_staging\".\"staging_rm_episodes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.274516Z", "completed_at": "2025-05-19T01:32:51.278312Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.278831Z", "completed_at": "2025-05-19T01:32:51.278837Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005445241928100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_rm_episodes_episode_id.e1123cf950", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    episode_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_rm_episodes\"\nwhere episode_id is not null\ngroup by episode_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.268854Z", "completed_at": "2025-05-19T01:32:51.280709Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.281685Z", "completed_at": "2025-05-19T01:32:51.281692Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015208959579467773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_rm_episodes_episode_id.750f703191", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect episode_id\nfrom \"camondagster\".\"public_base\".\"base_rm_episodes\"\nwhere episode_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.282438Z", "completed_at": "2025-05-19T01:32:51.295251Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.295828Z", "completed_at": "2025-05-19T01:32:51.295837Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0157625675201416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_rm_location_residents_location_dlt_id__character_id.e9a4362b6b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        location_dlt_id, character_id\n    from \"camondagster\".\"public_base\".\"base_rm_location_residents\"\n    group by location_dlt_id, character_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.291506Z", "completed_at": "2025-05-19T01:32:51.297108Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.298210Z", "completed_at": "2025-05-19T01:32:51.298218Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007888078689575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_rm_locations", "compiled": true, "compiled_code": "with resident_per_location as (\n\t\n(\n    SELECT\n        \n            location_dlt_id\n        ,\n        COUNT(character_id) AS Num_Characters\n    FROM \"camondagster\".\"public_base\".\"base_rm_location_residents\"\n    GROUP BY\n        \n            location_dlt_id\n        \n)\n \n)\n\nSELECT bl.location_id, location_name, location_type\n,CASE\n    WHEN LOWER(location_type) IN ('planet', 'asteroid', 'quasar', 'mount', 'elemental rings', 'dwarf planet (celestial dwarf)') THEN 'Celestial Body'\n    WHEN LOWER(location_type) IN ('teenyverse', 'miniverse', 'microverse', 'diegesis', 'non-diegetic alternative reality', 'box', 'machine') THEN 'Artificial World'\n    WHEN LOWER(location_type) IN ('game', 'dream', 'memory', 'tv', 'consciousness', 'nightmare', 'fantasy town') THEN 'Virtual/Simulated'\n    WHEN LOWER(location_type) IN ('space station', 'resort', 'spa', 'base', 'police department', 'customs', 'daycare', 'spacecraft', 'arcade') THEN 'Location Type'\n    WHEN LOWER(location_type) IN ('hell', 'reality', 'liquid', 'death star', 'artificially generated world') THEN 'Abstract Realm'\n    WHEN LOWER(location_type) IN ('country', 'cluster', 'menagerie', 'convention') THEN 'Social Structure'\n    WHEN LOWER(location_type) IN ('quadrant') THEN 'Quadrant/Zone'\n    ELSE 'Unknown' END AS location_categories\n, location_dimension\n,CASE\n        WHEN location_dimension ILIKE '%unknown%' THEN 'Unclassified'\n        WHEN LOWER(location_dimension) LIKE 'dimension c%' THEN 'Standard Format'\n        WHEN location_dimension ILIKE '%Fascist%' THEN 'Fascist Variant'\n        WHEN location_dimension ILIKE '%Magic%' OR\n             location_dimension ILIKE '%Fantasy%' OR\n             location_dimension ILIKE '%Post-Apocalyptic%' OR\n             location_dimension ILIKE '%Merged%' OR\n             location_dimension ILIKE '%Evil Rick%' OR\n             location_dimension ILIKE '%Testicle%' OR\n             location_dimension ILIKE '%Eric Stoltz%' OR\n             location_dimension ILIKE '%Wasp%' OR\n             location_dimension ILIKE '%Phone%' OR\n             location_dimension ILIKE '%Spider%' OR\n             location_dimension ILIKE '%Pizza%' OR\n             location_dimension ILIKE '%Chair%' OR\n             location_dimension ILIKE '%Tusk%' OR\n             location_dimension ILIKE '%Cromulon%' THEN 'Thematic'\n        WHEN location_dimension ILIKE '%Replacement%' OR location_dimension ILIKE '%Cronenberg%' THEN 'Canonical Named'\n        ELSE 'Other' end as dimension_group\n, location_created\n,bl.location_dlt_id\n,rpl.Num_Characters\nFROM \"camondagster\".\"public_base\".\"base_rm_locations\" as bl \nleft join resident_per_location as rpl\non bl.location_dlt_id = rpl.location_dlt_id", "relation_name": "\"camondagster\".\"public_staging\".\"staging_rm_locations\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.305388Z", "completed_at": "2025-05-19T01:32:51.309686Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.310239Z", "completed_at": "2025-05-19T01:32:51.310248Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0061914920806884766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_base_rm_locations_location_id.98f222cc59", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_base\".\"base_rm_locations\"\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.300057Z", "completed_at": "2025-05-19T01:32:51.311604Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.312759Z", "completed_at": "2025-05-19T01:32:51.312773Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015217781066894531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_base_rm_locations_location_id.a55eda5e7f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom \"camondagster\".\"public_base\".\"base_rm_locations\"\nwhere location_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.314760Z", "completed_at": "2025-05-19T01:32:51.325696Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.326237Z", "completed_at": "2025-05-19T01:32:51.326244Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014240264892578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_expectations_expect_column_values_to_be_between_base_weather_latitude__90___90__False.59cb5ebebd", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and latitude >= -90 and latitude <= 90\n)\n as expression\n\n\n    from \"camondagster\".\"public_base\".\"base_weather\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.320701Z", "completed_at": "2025-05-19T01:32:51.327115Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.328233Z", "completed_at": "2025-05-19T01:32:51.328239Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008915424346923828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_expectations_expect_column_values_to_be_between_base_weather_longitude__180___180__False.f01e8833c7", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and longitude >= -180 and longitude <= 180\n)\n as expression\n\n\n    from \"camondagster\".\"public_base\".\"base_weather\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.331231Z", "completed_at": "2025-05-19T01:32:51.344555Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.345141Z", "completed_at": "2025-05-19T01:32:51.345150Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016267776489257812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.dbt_utils_unique_combination_of_columns_base_weather_weather_date__city.cca068c581", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        weather_date, city\n    from \"camondagster\".\"public_base\".\"base_weather\"\n    group by weather_date, city\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.336577Z", "completed_at": "2025-05-19T01:32:51.347190Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.348154Z", "completed_at": "2025-05-19T01:32:51.348160Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01753973960876465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.relationships_base_weather_city__city__ref_base_geo_.1a216bf670", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select city as from_field\n    from \"camondagster\".\"public_base\".\"base_weather\"\n    where city is not null\n),\n\nparent as (\n    select city as to_field\n    from \"camondagster\".\"public_base\".\"base_geo\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.348896Z", "completed_at": "2025-05-19T01:32:51.358838Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.359960Z", "completed_at": "2025-05-19T01:32:51.359966Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013362407684326172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_dim_date_date_col.0abb09b4ea", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_col\nfrom \"camondagster\".\"public_common\".\"dim_date\"\nwhere date_col is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.354818Z", "completed_at": "2025-05-19T01:32:51.359437Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.360738Z", "completed_at": "2025-05-19T01:32:51.360744Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007131099700927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_dim_date_date_col.217a54f7bd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date_col as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_common\".\"dim_date\"\nwhere date_col is not null\ngroup by date_col\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.364799Z", "completed_at": "2025-05-19T01:32:51.372091Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.372604Z", "completed_at": "2025-05-19T01:32:51.372609Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009853601455688477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_beverage_glass_type", "compiled": true, "compiled_code": "SELECT glass_type, glass_type_sk\n    from \"camondagster\".\"public_snapshots\".\"glass_type_snapshot\"\n\tgroup by glass_type, glass_type_sk", "relation_name": "\"camondagster\".\"public_common\".\"dim_beverage_glass_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.367705Z", "completed_at": "2025-05-19T01:32:51.378630Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.379291Z", "completed_at": "2025-05-19T01:32:51.379298Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01606583595275879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_glass_type_snapshot_beverage_id.37ac86439c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect beverage_id\nfrom \"camondagster\".\"public_snapshots\".\"glass_type_snapshot\"\nwhere beverage_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.374870Z", "completed_at": "2025-05-19T01:32:51.384722Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.385394Z", "completed_at": "2025-05-19T01:32:51.385401Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011610031127929688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_glass_type_snapshot_beverage_id.5cc2dd93e1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    beverage_id as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_snapshots\".\"glass_type_snapshot\"\nwhere beverage_id is not null\ngroup by beverage_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.381773Z", "completed_at": "2025-05-19T01:32:51.386174Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.387172Z", "completed_at": "2025-05-19T01:32:51.387177Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006595134735107422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_alcoholic_type", "compiled": true, "compiled_code": "SELECT alcoholic_type, \nalcoholic_type_sk\n\tFrom \"camondagster\".\"public_staging\".\"staging_beverage_lookup\"\ngroup by alcoholic_type, alcoholic_type_sk", "relation_name": "\"camondagster\".\"public_common\".\"dim_alcoholic_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.390044Z", "completed_at": "2025-05-19T01:32:51.399137Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.399850Z", "completed_at": "2025-05-19T01:32:51.399857Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01200103759765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_beverage_type", "compiled": true, "compiled_code": "select beverage_type, alcoholic_type, beverage_category_sk, Alcoholic_Type_SK\n\tFrom \"camondagster\".\"public_staging\".\"staging_beverage_lookup\"\n\tgroup by beverage_type, alcoholic_type, beverage_category_sk, Alcoholic_Type_SK", "relation_name": "\"camondagster\".\"public_common\".\"dim_beverage_type\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.393451Z", "completed_at": "2025-05-19T01:32:51.402162Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.405283Z", "completed_at": "2025-05-19T01:32:51.405289Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0158693790435791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_beverage_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Staging_Beverage_Consumption\n-- Description: Fact Table data, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nselect bc.id_drink as beverage_id, str_drink as beverage_name, \nbcl.beverage_category_sk as beverage_category_sk,\nstr_glass as glass_type,\nbcl.beverage_type_sk as beverage_type_sk,\nbcl.beverage_type as beverage_type,\nbcl.alcoholic_type_sk as alcoholic_type_sk,\nbcl.alcoholic_type as alcoholic_type,\nstr_category, \nstr_alcoholic, \nbgl.glass_type_sk,\nstr_instructions as beverage_instructions, str_drink_thumb as beverage_url, date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, \nstr_ingredient6, str_ingredient7, str_ingredient8\n\t-- from public_base.base_beverage_consumption as bc\n    from \"camondagster\".\"public_base\".\"base_beverage_consumption\" as bc\n\t-- left join public_base.base_beverage_glass_lookup as bgl\n    left join \"camondagster\".\"public_snapshots\".\"glass_type_snapshot\"  as bgl\n\ton bc.id_drink = bgl.beverage_id and dbt_valid_to is null\n\tleft join \"camondagster\".\"public_staging\".\"staging_beverage_lookup\"  as bcl\n\ton bc.id_drink = bcl.beverage_id", "relation_name": "\"camondagster\".\"public_staging\".\"staging_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.402632Z", "completed_at": "2025-05-19T01:32:51.410800Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.411273Z", "completed_at": "2025-05-19T01:32:51.411277Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010274171829223633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_city", "compiled": true, "compiled_code": "select city, latitude, longitude, region, City_SK,\nCountry_SK\nfrom \"camondagster\".\"public_staging\".\"staging_geo\"\ngroup by city, latitude, longitude, region, City_SK, Country_SK", "relation_name": "\"camondagster\".\"public_common\".\"dim_city\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.408010Z", "completed_at": "2025-05-19T01:32:51.411999Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.412996Z", "completed_at": "2025-05-19T01:32:51.413001Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006290435791015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_country", "compiled": true, "compiled_code": "select country_code, country, Country_SK\nfrom \"camondagster\".\"public_staging\".\"staging_geo\"\ngroup by country_code, country, Country_SK", "relation_name": "\"camondagster\".\"public_common\".\"dim_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.416048Z", "completed_at": "2025-05-19T01:32:51.423442Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.423937Z", "completed_at": "2025-05-19T01:32:51.423942Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010162830352783203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_meal_category", "compiled": true, "compiled_code": "SELECT category_name, country_name, meal_country_category_sk\n\tFrom \"camondagster\".\"public_staging\".\"staging_meal_category_lookup\"\ngroup by category_name, country_name, meal_country_category_sk", "relation_name": "\"camondagster\".\"public_common\".\"dim_meal_category\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.420524Z", "completed_at": "2025-05-19T01:32:51.425722Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.426730Z", "completed_at": "2025-05-19T01:32:51.426735Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011316776275634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_meal_country", "compiled": true, "compiled_code": "SELECT country_name, meal_country_sk\n\tFrom \"camondagster\".\"public_staging\".\"staging_meal_category_lookup\"\ngroup by country_name, meal_country_sk", "relation_name": "\"camondagster\".\"public_common\".\"dim_meal_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.427468Z", "completed_at": "2025-05-19T01:32:51.432459Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.436317Z", "completed_at": "2025-05-19T01:32:51.436339Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011216878890991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.staging_meal_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Staging_Meal_Consumption\n-- Description: Fact Table data, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT bc.meal_id as meal_id, bc.meal_name as meal_name,\nbc.category_name as category_name, bc.country_name as country_name,\n-- Dim SK\nbcl.meal_country_category_sk as meal_country_category_sk,\n\nbc.instructions as instructions, bc.meal_image_url as meal_image_url, bc.meal_youtube_url as meal_youtube_url, \nstr_ingredient1, str_ingredient2, str_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8, str_ingredient9, str_ingredient10, str_ingredient11, str_ingredient12, \nstr_ingredient13, str_ingredient14, str_ingredient15, str_ingredient16, str_ingredient17, str_ingredient18, \nstr_ingredient19, str_ingredient20, bc.meal_url as meal_url\n\t-- FROM public_base.base_beverage_consumption as bc\n    FROM \"camondagster\".\"public_base\".\"base_meal_consumption\" as bc\n\tleft join \"camondagster\".\"public_staging\".\"staging_meal_category_lookup\"  as bcl\n\ton bc.meal_id = bcl.meal_id", "relation_name": "\"camondagster\".\"public_staging\".\"staging_meal_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.432921Z", "completed_at": "2025-05-19T01:32:51.443948Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.444490Z", "completed_at": "2025-05-19T01:32:51.444495Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01313161849975586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_meal_ingredient_hierarchy", "compiled": true, "compiled_code": "SELECT sil.meal_id, sil.ingredient_name as ingredient1\n,sil2.ingredient_name as ingredient2\n,sil3.ingredient_name as ingredient3\n,sil4.ingredient_name as ingredient4\nFROM \"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil\n-- Second\nleft join \"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil2\non sil.meal_id = sil2.meal_id and sil.ingredient_id != sil2.ingredient_id\n-- third\nleft join \"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil3\non sil.meal_id = sil3.meal_id and sil3.ingredient_id not in (sil2.ingredient_id, sil.ingredient_id)\n-- Fourth\nleft join \"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" as sil4\non sil.meal_id = sil4.meal_id and sil4.ingredient_id not in (sil3.ingredient_id, sil2.ingredient_id, sil.ingredient_id)", "relation_name": "\"camondagster\".\"public_common\".\"dim_meal_ingredient_hierarchy\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.438852Z", "completed_at": "2025-05-19T01:32:51.445729Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.446783Z", "completed_at": "2025-05-19T01:32:51.446791Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009036064147949219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.dim_meal_ingredient_jointable", "compiled": true, "compiled_code": "SELECT distinct meal_id\n    from \"camondagster\".\"public_staging\".\"staging_meal_ingredients_lookup\" \n    where meal_id is not null", "relation_name": "\"camondagster\".\"public_common\".\"dim_meal_ingredient_jointable\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.448585Z", "completed_at": "2025-05-19T01:32:51.456392Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.456914Z", "completed_at": "2025-05-19T01:32:51.456921Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010772228240966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.fact_beverage_consumption", "compiled": true, "compiled_code": "SELECT beverage_id, beverage_name, glass_type_sk, Beverage_Category_SK,Beverage_Type_SK, \nAlcoholic_Type_SK, Beverage_Type, Alcoholic_type,\nbeverage_instructions, beverage_url, Glass_Type, date_melbourne,\nstr_ingredient1, str_ingredient2, \nstr_ingredient3, str_ingredient4, str_ingredient5, \nstr_ingredient6, str_ingredient7, str_ingredient8\n    From \"camondagster\".\"public_staging\".\"staging_beverage_consumption\"", "relation_name": "\"camondagster\".\"public_common\".\"fact_beverage_consumption\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.452474Z", "completed_at": "2025-05-19T01:32:51.459295Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.463485Z", "completed_at": "2025-05-19T01:32:51.463493Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012304306030273438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_dim_city_city_sk.ab81b8c4f2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city_sk\nfrom \"camondagster\".\"public_common\".\"dim_city\"\nwhere city_sk is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.459772Z", "completed_at": "2025-05-19T01:32:51.464943Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.465956Z", "completed_at": "2025-05-19T01:32:51.465963Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0077648162841796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_dim_city_city_sk.c481aa01d2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    city_sk as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_common\".\"dim_city\"\nwhere city_sk is not null\ngroup by city_sk\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.472832Z", "completed_at": "2025-05-19T01:32:51.476819Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.477374Z", "completed_at": "2025-05-19T01:32:51.477382Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0057985782623291016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.unique_dim_country_country_sk.76e889bc85", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    country_sk as unique_field,\n    count(*) as n_records\n\nfrom \"camondagster\".\"public_common\".\"dim_country\"\nwhere country_sk is not null\ngroup by country_sk\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.467757Z", "completed_at": "2025-05-19T01:32:51.478076Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.479160Z", "completed_at": "2025-05-19T01:32:51.479167Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01381993293762207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.camondagster.not_null_dim_country_country_sk.86f12ec03d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_sk\nfrom \"camondagster\".\"public_common\".\"dim_country\"\nwhere country_sk is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-19T01:32:51.481063Z", "completed_at": "2025-05-19T01:32:51.483938Z"}, {"name": "execute", "started_at": "2025-05-19T01:32:51.484416Z", "completed_at": "2025-05-19T01:32:51.484421Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0045490264892578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.camondagster.fact_meal_consumption", "compiled": true, "compiled_code": "-- ------------------------------------------------------------------------------\n-- Model: Fact_Meal_Consumption\n-- Description: Fact Table, consumption events generated from API \n-- ------------------------------------------------------------------------------\n-- Change Log:\n-- Date       | Author   | Description\n-- -----------|----------|-------------------------------------------------------\n-- 2025-05-12 | Cam      | Initial creation\n-- YYYY-MM-DD | NAME     | [Add future changes here]\n-- ------------------------------------------------------------------------------\n\nSELECT meal_id, meal_name,\ncategory_name, country_name,\nmeal_country_category_sk,\ninstructions, meal_image_url, meal_youtube_url, \nstr_ingredient1, str_ingredient2, str_ingredient3, str_ingredient4, str_ingredient5, str_ingredient6, \nstr_ingredient7, str_ingredient8, str_ingredient9, str_ingredient10, str_ingredient11, str_ingredient12, \nstr_ingredient13, str_ingredient14, str_ingredient15, str_ingredient16, str_ingredient17, str_ingredient18, \nstr_ingredient19, str_ingredient20, meal_url\nFROM \"camondagster\".\"public_staging\".\"staging_meal_consumption\"", "relation_name": "\"camondagster\".\"public_common\".\"fact_meal_consumption\"", "batch_results": null}], "elapsed_time": 2.9605069160461426, "args": {"state_modified_compare_more_unrendered_values": false, "use_colors_file": true, "log_level_file": "debug", "static": false, "indirect_selection": "eager", "partial_parse": true, "invocation_command": "dbt docs generate", "require_explicit_package_overrides_for_builtin_materializations": true, "state_modified_compare_vars": false, "version_check": true, "compile": true, "defer": false, "printer_width": 80, "project_dir": "/home/runner/work/CamOnDagsterDbt/CamOnDagsterDbt/dbt", "require_resource_names_without_spaces": false, "require_nested_cumulative_type_params": false, "log_level": "info", "require_yaml_configuration_for_mf_time_spines": false, "require_batched_execution_for_custom_microbatch_strategy": false, "introspect": true, "favor_state": false, "log_file_max_bytes": 10485760, "send_anonymous_usage_stats": true, "profiles_dir": "/home/runner/.dbt", "select": [], "empty_catalog": false, "which": "generate", "print": true, "log_path": "/home/runner/work/CamOnDagsterDbt/CamOnDagsterDbt/dbt/logs", "macro_debugging": false, "strict_mode": false, "populate_cache": true, "partial_parse_file_diff": true, "skip_nodes_if_on_run_start_fails": false, "static_parser": true, "warn_error_options": {"include": [], "exclude": []}, "use_colors": true, "show_resource_report": false, "exclude": [], "log_format": "default", "source_freshness_run_project_hooks": false, "quiet": false, "vars": {}, "log_format_file": "debug", "cache_selected_only": false, "write_json": true}}